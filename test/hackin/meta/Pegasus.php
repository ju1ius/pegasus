<?php
/**
 * This file has been generated by Pegasus.
 */

use ju1ius\Pegasus\Node;


class Pegasus extends ju1ius\Pegasus\Parser\Generated\LRPackrat
{
    /**
     * The default start rule from the grammar.
     *
     * @var string
     */
    protected $start_rule = 'grammar';

    /**
     * grammar = <_> <directives> <rules>
     */
    public function match_grammar()
    {
        $result_243 = null;
        /**
         * matching <_> <directives> <rules>
         */
        $match_243 = true;
        $pos_243 = $this->pos;
        $children_243 = [];
        do {
            $result_240 = null;
            $result_240 = $this->apply('_', $this->pos);
            if (!$result_240) {
                $match_243 = false;
                break;
            } else {
                $children_243[] = $result_240;
            }
            $result_241 = null;
            $result_241 = $this->apply('directives', $this->pos);
            if (!$result_241) {
                $match_243 = false;
                break;
            } else {
                $children_243[] = $result_241;
            }
            $result_242 = null;
            $result_242 = $this->apply('rules', $this->pos);
            if (!$result_242) {
                $match_243 = false;
                break;
            } else {
                $children_243[] = $result_242;
            }
        } while(0);
        if (true === $match_243) {
            $result_243 = new Node\Sequence('grammar', $this->text, $pos_243, $this->pos, $children_243);
        } else {
            $result_243 = null;
            $this->pos = $pos_243;
        }
        return $result_243;
    }
    /**
     * directives = (<directive>)*
     */
    public function match_directives()
    {
        $result_245 = null;
 
        /**
         * matching (<directive>)*
         */
        $pos_245 = $this->pos;
        $count_245 = 0;
        $children_245 = [];
        while ($count_245 < INF) {
            $result_244 = null;
            $result_244 = $this->apply('directive', $this->pos);
            if (!$result_244) {
                break;
            }
            $count_245++;
            $children_245[] = $result_244;
            $length = $result_244->end - $result_244->start;
            if (!$length) {
                break;
            }
        }
        if ($count_245 >= 0) {
            $result_245 = new Node\Quantifier('directives', $this->text, $pos_245, $this->pos, $children_245);
        } else {
            $this->pos = $pos_245;
        }
        return $result_245;
    }
    /**
     * directive = <name_directive> | <ws_directive> | <ci_directive>
     */
    public function match_directive()
    {
        $result_249 = null;
        /**
         * matching <name_directive> | <ws_directive> | <ci_directive>
         */
        $result_249 = null;
        do {
            $pos_249 = $this->pos;
            $result_246 = null;
            $result_246 = $this->apply('name_directive', $this->pos);
            if ($result_246) {
                $result_249 = $result_246;
                break;
            }
            $this->pos = $pos_249;
            $result_247 = null;
            $result_247 = $this->apply('ws_directive', $this->pos);
            if ($result_247) {
                $result_249 = $result_247;
                break;
            }
            $this->pos = $pos_249;
            $result_248 = null;
            $result_248 = $this->apply('ci_directive', $this->pos);
            if ($result_248) {
                $result_249 = $result_248;
                break;
            }
            $this->pos = $pos_249;
        } while (0);
        if ($result_249) {
            $result_249 = new Node\OneOf('directive', $this->text, $pos_249, $this->pos, [$result_249]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: directive = <name_directive> | <ws_directive> | <ci_directive>>';
            $this->error->pos = $pos_249;
        }
        return $result_249;
    }
    /**
     * name_directive = "%name" <_> <identifier>
     */
    public function match_name_directive()
    {
        $result_253 = null;
        /**
         * matching "%name" <_> <identifier>
         */
        $match_253 = true;
        $pos_253 = $this->pos;
        $children_253 = [];
        do {
            $result_250 = null;
            /**
             * matching: "%name"
             */
            $value = '%name';
            $length = 5;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_250 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_250->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "%name">';
                $this->error->pos = $this->pos;
            }
            if (!$result_250) {
                $match_253 = false;
                break;
            } else {
                $children_253[] = $result_250;
            }
            $result_251 = null;
            $result_251 = $this->apply('_', $this->pos);
            if (!$result_251) {
                $match_253 = false;
                break;
            } else {
                $children_253[] = $result_251;
            }
            $result_252 = null;
            $result_252 = $this->apply('identifier', $this->pos);
            if (!$result_252) {
                $match_253 = false;
                break;
            } else {
                $children_253[] = $result_252;
            }
        } while(0);
        if (true === $match_253) {
            $result_253 = new Node\Sequence('name_directive', $this->text, $pos_253, $this->pos, $children_253);
        } else {
            $result_253 = null;
            $this->pos = $pos_253;
        }
        return $result_253;
    }
    /**
     * ws_directive = "%whitespace" <_> <equals> <expression>
     */
    public function match_ws_directive()
    {
        $result_258 = null;
        /**
         * matching "%whitespace" <_> <equals> <expression>
         */
        $match_258 = true;
        $pos_258 = $this->pos;
        $children_258 = [];
        do {
            $result_254 = null;
            /**
             * matching: "%whitespace"
             */
            $value = '%whitespace';
            $length = 11;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_254 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_254->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "%whitespace">';
                $this->error->pos = $this->pos;
            }
            if (!$result_254) {
                $match_258 = false;
                break;
            } else {
                $children_258[] = $result_254;
            }
            $result_255 = null;
            $result_255 = $this->apply('_', $this->pos);
            if (!$result_255) {
                $match_258 = false;
                break;
            } else {
                $children_258[] = $result_255;
            }
            $result_256 = null;
            $result_256 = $this->apply('equals', $this->pos);
            if (!$result_256) {
                $match_258 = false;
                break;
            } else {
                $children_258[] = $result_256;
            }
            $result_257 = null;
            $result_257 = $this->apply('expression', $this->pos);
            if (!$result_257) {
                $match_258 = false;
                break;
            } else {
                $children_258[] = $result_257;
            }
        } while(0);
        if (true === $match_258) {
            $result_258 = new Node\Sequence('ws_directive', $this->text, $pos_258, $this->pos, $children_258);
        } else {
            $result_258 = null;
            $this->pos = $pos_258;
        }
        return $result_258;
    }
    /**
     * ci_directive = "%case_insensitive" <_>
     */
    public function match_ci_directive()
    {
        $result_261 = null;
        /**
         * matching "%case_insensitive" <_>
         */
        $match_261 = true;
        $pos_261 = $this->pos;
        $children_261 = [];
        do {
            $result_259 = null;
            /**
             * matching: "%case_insensitive"
             */
            $value = '%case_insensitive';
            $length = 17;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_259 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_259->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "%case_insensitive">';
                $this->error->pos = $this->pos;
            }
            if (!$result_259) {
                $match_261 = false;
                break;
            } else {
                $children_261[] = $result_259;
            }
            $result_260 = null;
            $result_260 = $this->apply('_', $this->pos);
            if (!$result_260) {
                $match_261 = false;
                break;
            } else {
                $children_261[] = $result_260;
            }
        } while(0);
        if (true === $match_261) {
            $result_261 = new Node\Sequence('ci_directive', $this->text, $pos_261, $this->pos, $children_261);
        } else {
            $result_261 = null;
            $this->pos = $pos_261;
        }
        return $result_261;
    }
    /**
     * rules = (<rule>)+
     */
    public function match_rules()
    {
        $result_263 = null;
 
        /**
         * matching (<rule>)+
         */
        $pos_263 = $this->pos;
        $count_263 = 0;
        $children_263 = [];
        while ($count_263 < INF) {
            $result_262 = null;
            $result_262 = $this->apply('rule', $this->pos);
            if (!$result_262) {
                break;
            }
            $count_263++;
            $children_263[] = $result_262;
            $length = $result_262->end - $result_262->start;
            if (!$length) {
                break;
            }
        }
        if ($count_263 >= 1) {
            $result_263 = new Node\Quantifier('rules', $this->text, $pos_263, $this->pos, $children_263);
        } else {
            $this->pos = $pos_263;
        }
        return $result_263;
    }
    /**
     * rule = <identifier> <equals> <expression>
     */
    public function match_rule()
    {
        $result_267 = null;
        /**
         * matching <identifier> <equals> <expression>
         */
        $match_267 = true;
        $pos_267 = $this->pos;
        $children_267 = [];
        do {
            $result_264 = null;
            $result_264 = $this->apply('identifier', $this->pos);
            if (!$result_264) {
                $match_267 = false;
                break;
            } else {
                $children_267[] = $result_264;
            }
            $result_265 = null;
            $result_265 = $this->apply('equals', $this->pos);
            if (!$result_265) {
                $match_267 = false;
                break;
            } else {
                $children_267[] = $result_265;
            }
            $result_266 = null;
            $result_266 = $this->apply('expression', $this->pos);
            if (!$result_266) {
                $match_267 = false;
                break;
            } else {
                $children_267[] = $result_266;
            }
        } while(0);
        if (true === $match_267) {
            $result_267 = new Node\Sequence('rule', $this->text, $pos_267, $this->pos, $children_267);
        } else {
            $result_267 = null;
            $this->pos = $pos_267;
        }
        return $result_267;
    }
    /**
     * expression = <choice> | <sequence> | <term>
     */
    public function match_expression()
    {
        $result_271 = null;
        /**
         * matching <choice> | <sequence> | <term>
         */
        $result_271 = null;
        do {
            $pos_271 = $this->pos;
            $result_268 = null;
            $result_268 = $this->apply('choice', $this->pos);
            if ($result_268) {
                $result_271 = $result_268;
                break;
            }
            $this->pos = $pos_271;
            $result_269 = null;
            $result_269 = $this->apply('sequence', $this->pos);
            if ($result_269) {
                $result_271 = $result_269;
                break;
            }
            $this->pos = $pos_271;
            $result_270 = null;
            $result_270 = $this->apply('term', $this->pos);
            if ($result_270) {
                $result_271 = $result_270;
                break;
            }
            $this->pos = $pos_271;
        } while (0);
        if ($result_271) {
            $result_271 = new Node\OneOf('expression', $this->text, $pos_271, $this->pos, [$result_271]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: expression = <choice> | <sequence> | <term>>';
            $this->error->pos = $pos_271;
        }
        return $result_271;
    }
    /**
     * choice = <alternative> (<OR> <alternative>)+
     */
    public function match_choice()
    {
        $result_277 = null;
        /**
         * matching <alternative> (<OR> <alternative>)+
         */
        $match_277 = true;
        $pos_277 = $this->pos;
        $children_277 = [];
        do {
            $result_272 = null;
            $result_272 = $this->apply('alternative', $this->pos);
            if (!$result_272) {
                $match_277 = false;
                break;
            } else {
                $children_277[] = $result_272;
            }
            $result_276 = null;
 
            /**
             * matching (<OR> <alternative>)+
             */
            $pos_276 = $this->pos;
            $count_276 = 0;
            $children_276 = [];
            while ($count_276 < INF) {
                $result_275 = null;
                /**
                 * matching <OR> <alternative>
                 */
                $match_275 = true;
                $pos_275 = $this->pos;
                $children_275 = [];
                do {
                    $result_273 = null;
                    $result_273 = $this->apply('OR', $this->pos);
                    if (!$result_273) {
                        $match_275 = false;
                        break;
                    } else {
                        $children_275[] = $result_273;
                    }
                    $result_274 = null;
                    $result_274 = $this->apply('alternative', $this->pos);
                    if (!$result_274) {
                        $match_275 = false;
                        break;
                    } else {
                        $children_275[] = $result_274;
                    }
                } while(0);
                if (true === $match_275) {
                    $result_275 = new Node\Sequence('', $this->text, $pos_275, $this->pos, $children_275);
                } else {
                    $result_275 = null;
                    $this->pos = $pos_275;
                }
                if (!$result_275) {
                    break;
                }
                $count_276++;
                $children_276[] = $result_275;
                $length = $result_275->end - $result_275->start;
                if (!$length) {
                    break;
                }
            }
            if ($count_276 >= 1) {
                $result_276 = new Node\Quantifier('', $this->text, $pos_276, $this->pos, $children_276);
            } else {
                $this->pos = $pos_276;
            }
            if (!$result_276) {
                $match_277 = false;
                break;
            } else {
                $children_277[] = $result_276;
            }
        } while(0);
        if (true === $match_277) {
            $result_277 = new Node\Sequence('choice', $this->text, $pos_277, $this->pos, $children_277);
        } else {
            $result_277 = null;
            $this->pos = $pos_277;
        }
        return $result_277;
    }
    /**
     * alternative = <sequence> | <term>
     */
    public function match_alternative()
    {
        $result_280 = null;
        /**
         * matching <sequence> | <term>
         */
        $result_280 = null;
        do {
            $pos_280 = $this->pos;
            $result_278 = null;
            $result_278 = $this->apply('sequence', $this->pos);
            if ($result_278) {
                $result_280 = $result_278;
                break;
            }
            $this->pos = $pos_280;
            $result_279 = null;
            $result_279 = $this->apply('term', $this->pos);
            if ($result_279) {
                $result_280 = $result_279;
                break;
            }
            $this->pos = $pos_280;
        } while (0);
        if ($result_280) {
            $result_280 = new Node\OneOf('alternative', $this->text, $pos_280, $this->pos, [$result_280]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: alternative = <sequence> | <term>>';
            $this->error->pos = $pos_280;
        }
        return $result_280;
    }
    /**
     * sequence = (<term>){2,}
     */
    public function match_sequence()
    {
        $result_282 = null;
 
        /**
         * matching (<term>){2,}
         */
        $pos_282 = $this->pos;
        $count_282 = 0;
        $children_282 = [];
        while ($count_282 < INF) {
            $result_281 = null;
            $result_281 = $this->apply('term', $this->pos);
            if (!$result_281) {
                break;
            }
            $count_282++;
            $children_282[] = $result_281;
            $length = $result_281->end - $result_281->start;
            if (!$length) {
                break;
            }
        }
        if ($count_282 >= 2) {
            $result_282 = new Node\Quantifier('sequence', $this->text, $pos_282, $this->pos, $children_282);
        } else {
            $this->pos = $pos_282;
        }
        return $result_282;
    }
    /**
     * term = <labeled> | <labelable>
     */
    public function match_term()
    {
        $result_285 = null;
        /**
         * matching <labeled> | <labelable>
         */
        $result_285 = null;
        do {
            $pos_285 = $this->pos;
            $result_283 = null;
            $result_283 = $this->apply('labeled', $this->pos);
            if ($result_283) {
                $result_285 = $result_283;
                break;
            }
            $this->pos = $pos_285;
            $result_284 = null;
            $result_284 = $this->apply('labelable', $this->pos);
            if ($result_284) {
                $result_285 = $result_284;
                break;
            }
            $this->pos = $pos_285;
        } while (0);
        if ($result_285) {
            $result_285 = new Node\OneOf('term', $this->text, $pos_285, $this->pos, [$result_285]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: term = <labeled> | <labelable>>';
            $this->error->pos = $pos_285;
        }
        return $result_285;
    }
    /**
     * labeled = <label> <labelable>
     */
    public function match_labeled()
    {
        $result_288 = null;
        /**
         * matching <label> <labelable>
         */
        $match_288 = true;
        $pos_288 = $this->pos;
        $children_288 = [];
        do {
            $result_286 = null;
            $result_286 = $this->apply('label', $this->pos);
            if (!$result_286) {
                $match_288 = false;
                break;
            } else {
                $children_288[] = $result_286;
            }
            $result_287 = null;
            $result_287 = $this->apply('labelable', $this->pos);
            if (!$result_287) {
                $match_288 = false;
                break;
            } else {
                $children_288[] = $result_287;
            }
        } while(0);
        if (true === $match_288) {
            $result_288 = new Node\Sequence('labeled', $this->text, $pos_288, $this->pos, $children_288);
        } else {
            $result_288 = null;
            $this->pos = $pos_288;
        }
        return $result_288;
    }
    /**
     * labelable = <prefixed> | <prefixable>
     */
    public function match_labelable()
    {
        $result_291 = null;
        /**
         * matching <prefixed> | <prefixable>
         */
        $result_291 = null;
        do {
            $pos_291 = $this->pos;
            $result_289 = null;
            $result_289 = $this->apply('prefixed', $this->pos);
            if ($result_289) {
                $result_291 = $result_289;
                break;
            }
            $this->pos = $pos_291;
            $result_290 = null;
            $result_290 = $this->apply('prefixable', $this->pos);
            if ($result_290) {
                $result_291 = $result_290;
                break;
            }
            $this->pos = $pos_291;
        } while (0);
        if ($result_291) {
            $result_291 = new Node\OneOf('labelable', $this->text, $pos_291, $this->pos, [$result_291]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: labelable = <prefixed> | <prefixable>>';
            $this->error->pos = $pos_291;
        }
        return $result_291;
    }
    /**
     * prefixed = <skip> | <lookahead> | <not>
     */
    public function match_prefixed()
    {
        $result_295 = null;
        /**
         * matching <skip> | <lookahead> | <not>
         */
        $result_295 = null;
        do {
            $pos_295 = $this->pos;
            $result_292 = null;
            $result_292 = $this->apply('skip', $this->pos);
            if ($result_292) {
                $result_295 = $result_292;
                break;
            }
            $this->pos = $pos_295;
            $result_293 = null;
            $result_293 = $this->apply('lookahead', $this->pos);
            if ($result_293) {
                $result_295 = $result_293;
                break;
            }
            $this->pos = $pos_295;
            $result_294 = null;
            $result_294 = $this->apply('not', $this->pos);
            if ($result_294) {
                $result_295 = $result_294;
                break;
            }
            $this->pos = $pos_295;
        } while (0);
        if ($result_295) {
            $result_295 = new Node\OneOf('prefixed', $this->text, $pos_295, $this->pos, [$result_295]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: prefixed = <skip> | <lookahead> | <not>>';
            $this->error->pos = $pos_295;
        }
        return $result_295;
    }
    /**
     * skip = "~" <prefixable>
     */
    public function match_skip()
    {
        $result_298 = null;
        /**
         * matching "~" <prefixable>
         */
        $match_298 = true;
        $pos_298 = $this->pos;
        $children_298 = [];
        do {
            $result_296 = null;
            /**
             * matching: "~"
             */
            $value = '~';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_296 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_296->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "~">';
                $this->error->pos = $this->pos;
            }
            if (!$result_296) {
                $match_298 = false;
                break;
            } else {
                $children_298[] = $result_296;
            }
            $result_297 = null;
            $result_297 = $this->apply('prefixable', $this->pos);
            if (!$result_297) {
                $match_298 = false;
                break;
            } else {
                $children_298[] = $result_297;
            }
        } while(0);
        if (true === $match_298) {
            $result_298 = new Node\Sequence('skip', $this->text, $pos_298, $this->pos, $children_298);
        } else {
            $result_298 = null;
            $this->pos = $pos_298;
        }
        return $result_298;
    }
    /**
     * lookahead = "&" <prefixable>
     */
    public function match_lookahead()
    {
        $result_301 = null;
        /**
         * matching "&" <prefixable>
         */
        $match_301 = true;
        $pos_301 = $this->pos;
        $children_301 = [];
        do {
            $result_299 = null;
            /**
             * matching: "&"
             */
            $value = '&';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_299 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_299->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "&">';
                $this->error->pos = $this->pos;
            }
            if (!$result_299) {
                $match_301 = false;
                break;
            } else {
                $children_301[] = $result_299;
            }
            $result_300 = null;
            $result_300 = $this->apply('prefixable', $this->pos);
            if (!$result_300) {
                $match_301 = false;
                break;
            } else {
                $children_301[] = $result_300;
            }
        } while(0);
        if (true === $match_301) {
            $result_301 = new Node\Sequence('lookahead', $this->text, $pos_301, $this->pos, $children_301);
        } else {
            $result_301 = null;
            $this->pos = $pos_301;
        }
        return $result_301;
    }
    /**
     * not = "!" <prefixable>
     */
    public function match_not()
    {
        $result_304 = null;
        /**
         * matching "!" <prefixable>
         */
        $match_304 = true;
        $pos_304 = $this->pos;
        $children_304 = [];
        do {
            $result_302 = null;
            /**
             * matching: "!"
             */
            $value = '!';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_302 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_302->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "!">';
                $this->error->pos = $this->pos;
            }
            if (!$result_302) {
                $match_304 = false;
                break;
            } else {
                $children_304[] = $result_302;
            }
            $result_303 = null;
            $result_303 = $this->apply('prefixable', $this->pos);
            if (!$result_303) {
                $match_304 = false;
                break;
            } else {
                $children_304[] = $result_303;
            }
        } while(0);
        if (true === $match_304) {
            $result_304 = new Node\Sequence('not', $this->text, $pos_304, $this->pos, $children_304);
        } else {
            $result_304 = null;
            $this->pos = $pos_304;
        }
        return $result_304;
    }
    /**
     * prefixable = <prefixed> | <suffixable> | <primary>
     */
    public function match_prefixable()
    {
        $result_308 = null;
        /**
         * matching <prefixed> | <suffixable> | <primary>
         */
        $result_308 = null;
        do {
            $pos_308 = $this->pos;
            $result_305 = null;
            $result_305 = $this->apply('prefixed', $this->pos);
            if ($result_305) {
                $result_308 = $result_305;
                break;
            }
            $this->pos = $pos_308;
            $result_306 = null;
            $result_306 = $this->apply('suffixable', $this->pos);
            if ($result_306) {
                $result_308 = $result_306;
                break;
            }
            $this->pos = $pos_308;
            $result_307 = null;
            $result_307 = $this->apply('primary', $this->pos);
            if ($result_307) {
                $result_308 = $result_307;
                break;
            }
            $this->pos = $pos_308;
        } while (0);
        if ($result_308) {
            $result_308 = new Node\OneOf('prefixable', $this->text, $pos_308, $this->pos, [$result_308]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: prefixable = <prefixed> | <suffixable> | <primary>>';
            $this->error->pos = $pos_308;
        }
        return $result_308;
    }
    /**
     * suffixable = <suffixed> | <primary>
     */
    public function match_suffixable()
    {
        $result_311 = null;
        /**
         * matching <suffixed> | <primary>
         */
        $result_311 = null;
        do {
            $pos_311 = $this->pos;
            $result_309 = null;
            $result_309 = $this->apply('suffixed', $this->pos);
            if ($result_309) {
                $result_311 = $result_309;
                break;
            }
            $this->pos = $pos_311;
            $result_310 = null;
            $result_310 = $this->apply('primary', $this->pos);
            if ($result_310) {
                $result_311 = $result_310;
                break;
            }
            $this->pos = $pos_311;
        } while (0);
        if ($result_311) {
            $result_311 = new Node\OneOf('suffixable', $this->text, $pos_311, $this->pos, [$result_311]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: suffixable = <suffixed> | <primary>>';
            $this->error->pos = $pos_311;
        }
        return $result_311;
    }
    /**
     * suffixed = <suffixable> <quantifier>
     */
    public function match_suffixed()
    {
        $result_314 = null;
        /**
         * matching <suffixable> <quantifier>
         */
        $match_314 = true;
        $pos_314 = $this->pos;
        $children_314 = [];
        do {
            $result_312 = null;
            $result_312 = $this->apply('suffixable', $this->pos);
            if (!$result_312) {
                $match_314 = false;
                break;
            } else {
                $children_314[] = $result_312;
            }
            $result_313 = null;
            $result_313 = $this->apply('quantifier', $this->pos);
            if (!$result_313) {
                $match_314 = false;
                break;
            } else {
                $children_314[] = $result_313;
            }
        } while(0);
        if (true === $match_314) {
            $result_314 = new Node\Sequence('suffixed', $this->text, $pos_314, $this->pos, $children_314);
        } else {
            $result_314 = null;
            $this->pos = $pos_314;
        }
        return $result_314;
    }
    /**
     * primary = <parenthesized> | <atom>
     */
    public function match_primary()
    {
        $result_317 = null;
        /**
         * matching <parenthesized> | <atom>
         */
        $result_317 = null;
        do {
            $pos_317 = $this->pos;
            $result_315 = null;
            $result_315 = $this->apply('parenthesized', $this->pos);
            if ($result_315) {
                $result_317 = $result_315;
                break;
            }
            $this->pos = $pos_317;
            $result_316 = null;
            $result_316 = $this->apply('atom', $this->pos);
            if ($result_316) {
                $result_317 = $result_316;
                break;
            }
            $this->pos = $pos_317;
        } while (0);
        if ($result_317) {
            $result_317 = new Node\OneOf('primary', $this->text, $pos_317, $this->pos, [$result_317]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: primary = <parenthesized> | <atom>>';
            $this->error->pos = $pos_317;
        }
        return $result_317;
    }
    /**
     * parenthesized = "(" <_> <expression> ")" <_>
     */
    public function match_parenthesized()
    {
        $result_323 = null;
        /**
         * matching "(" <_> <expression> ")" <_>
         */
        $match_323 = true;
        $pos_323 = $this->pos;
        $children_323 = [];
        do {
            $result_318 = null;
            /**
             * matching: "("
             */
            $value = '(';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_318 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_318->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "(">';
                $this->error->pos = $this->pos;
            }
            if (!$result_318) {
                $match_323 = false;
                break;
            } else {
                $children_323[] = $result_318;
            }
            $result_319 = null;
            $result_319 = $this->apply('_', $this->pos);
            if (!$result_319) {
                $match_323 = false;
                break;
            } else {
                $children_323[] = $result_319;
            }
            $result_320 = null;
            $result_320 = $this->apply('expression', $this->pos);
            if (!$result_320) {
                $match_323 = false;
                break;
            } else {
                $children_323[] = $result_320;
            }
            $result_321 = null;
            /**
             * matching: ")"
             */
            $value = ')';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_321 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_321->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: ")">';
                $this->error->pos = $this->pos;
            }
            if (!$result_321) {
                $match_323 = false;
                break;
            } else {
                $children_323[] = $result_321;
            }
            $result_322 = null;
            $result_322 = $this->apply('_', $this->pos);
            if (!$result_322) {
                $match_323 = false;
                break;
            } else {
                $children_323[] = $result_322;
            }
        } while(0);
        if (true === $match_323) {
            $result_323 = new Node\Sequence('parenthesized', $this->text, $pos_323, $this->pos, $children_323);
        } else {
            $result_323 = null;
            $this->pos = $pos_323;
        }
        return $result_323;
    }
    /**
     * atom = <literal> | <regex> | <reference>
     */
    public function match_atom()
    {
        $result_327 = null;
        /**
         * matching <literal> | <regex> | <reference>
         */
        $result_327 = null;
        do {
            $pos_327 = $this->pos;
            $result_324 = null;
            $result_324 = $this->apply('literal', $this->pos);
            if ($result_324) {
                $result_327 = $result_324;
                break;
            }
            $this->pos = $pos_327;
            $result_325 = null;
            $result_325 = $this->apply('regex', $this->pos);
            if ($result_325) {
                $result_327 = $result_325;
                break;
            }
            $this->pos = $pos_327;
            $result_326 = null;
            $result_326 = $this->apply('reference', $this->pos);
            if ($result_326) {
                $result_327 = $result_326;
                break;
            }
            $this->pos = $pos_327;
        } while (0);
        if ($result_327) {
            $result_327 = new Node\OneOf('atom', $this->text, $pos_327, $this->pos, [$result_327]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: atom = <literal> | <regex> | <reference>>';
            $this->error->pos = $pos_327;
        }
        return $result_327;
    }
    /**
     * equals = "=" <_>
     */
    public function match_equals()
    {
        $result_330 = null;
        /**
         * matching "=" <_>
         */
        $match_330 = true;
        $pos_330 = $this->pos;
        $children_330 = [];
        do {
            $result_328 = null;
            /**
             * matching: "="
             */
            $value = '=';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_328 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_328->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "=">';
                $this->error->pos = $this->pos;
            }
            if (!$result_328) {
                $match_330 = false;
                break;
            } else {
                $children_330[] = $result_328;
            }
            $result_329 = null;
            $result_329 = $this->apply('_', $this->pos);
            if (!$result_329) {
                $match_330 = false;
                break;
            } else {
                $children_330[] = $result_329;
            }
        } while(0);
        if (true === $match_330) {
            $result_330 = new Node\Sequence('equals', $this->text, $pos_330, $this->pos, $children_330);
        } else {
            $result_330 = null;
            $this->pos = $pos_330;
        }
        return $result_330;
    }
    /**
     * reference = <identifier> !(<equals>)
     */
    public function match_reference()
    {
        $result_334 = null;
        /**
         * matching <identifier> !(<equals>)
         */
        $match_334 = true;
        $pos_334 = $this->pos;
        $children_334 = [];
        do {
            $result_331 = null;
            $result_331 = $this->apply('identifier', $this->pos);
            if (!$result_331) {
                $match_334 = false;
                break;
            } else {
                $children_334[] = $result_331;
            }
            $result_333 = null;
            /**
             * matching !(<equals>)
             */
            $result_333 = null;
            $result_332 = null;
            $result_332 = $this->apply('equals', $this->pos);
 
            if (!$result_332) {
                $result_333 = new Node\Not('', $this->text, $this->pos, $this->pos);
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Not: !(<equals>)>';
                $this->error->pos = $this->pos;
            }
            if (!$result_333) {
                $match_334 = false;
                break;
            } else {
                $children_334[] = $result_333;
            }
        } while(0);
        if (true === $match_334) {
            $result_334 = new Node\Sequence('reference', $this->text, $pos_334, $this->pos, $children_334);
        } else {
            $result_334 = null;
            $this->pos = $pos_334;
        }
        return $result_334;
    }
    /*
     * quantifier = /\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx <_>
     */
    public function match_quantifier()
    {
        $result_337 = null;
        /**
         * matching /\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx <_>
         */
        $match_337 = true;
        $pos_337 = $this->pos;
        $children_337 = [];
        do {
            $result_335 = null;
            /**
             * matching: /\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx
             */
            $pattern = '/\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_335 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_335->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_335) {
                $match_337 = false;
                break;
            } else {
                $children_337[] = $result_335;
            }
            $result_336 = null;
            $result_336 = $this->apply('_', $this->pos);
            if (!$result_336) {
                $match_337 = false;
                break;
            } else {
                $children_337[] = $result_336;
            }
        } while(0);
        if (true === $match_337) {
            $result_337 = new Node\Sequence('quantifier', $this->text, $pos_337, $this->pos, $children_337);
        } else {
            $result_337 = null;
            $this->pos = $pos_337;
        }
        return $result_337;
    }
    /**
     * regex = /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([ilmsux]*)?  /Sx <_>
     */
    public function match_regex()
    {
        $result_340 = null;
        /**
         * matching /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([ilmsux]*)?  /Sx <_>
         */
        $match_340 = true;
        $pos_340 = $this->pos;
        $children_340 = [];
        do {
            $result_338 = null;
            /**
             * matching: /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([ilmsux]*)?  /Sx
             */
            $pattern = '/\G  \/ ((?: (?:\\\\.) | [^\/] )*) \/ ([ilmsux]*)?  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_338 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_338->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([ilmsux]*)?  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_338) {
                $match_340 = false;
                break;
            } else {
                $children_340[] = $result_338;
            }
            $result_339 = null;
            $result_339 = $this->apply('_', $this->pos);
            if (!$result_339) {
                $match_340 = false;
                break;
            } else {
                $children_340[] = $result_339;
            }
        } while(0);
        if (true === $match_340) {
            $result_340 = new Node\Sequence('regex', $this->text, $pos_340, $this->pos, $children_340);
        } else {
            $result_340 = null;
            $this->pos = $pos_340;
        }
        return $result_340;
    }
    /**
     * literal = /\G  (["']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx <_>
     */
    public function match_literal()
    {
        $result_343 = null;
        /**
         * matching /\G  (["']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx <_>
         */
        $match_343 = true;
        $pos_343 = $this->pos;
        $children_343 = [];
        do {
            $result_341 = null;
            /**
             * matching: /\G  (["']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx
             */
            $pattern = '/\G  (["\']) ((?: (?:\\\\.) | (?:(?!\1).) )*) \1  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_341 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_341->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  (["\']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_341) {
                $match_343 = false;
                break;
            } else {
                $children_343[] = $result_341;
            }
            $result_342 = null;
            $result_342 = $this->apply('_', $this->pos);
            if (!$result_342) {
                $match_343 = false;
                break;
            } else {
                $children_343[] = $result_342;
            }
        } while(0);
        if (true === $match_343) {
            $result_343 = new Node\Sequence('literal', $this->text, $pos_343, $this->pos, $children_343);
        } else {
            $result_343 = null;
            $this->pos = $pos_343;
        }
        return $result_343;
    }
    /**
     * label = /\G  ([a-zA-Z_]\w*):  /Sx
     */
    public function match_label()
    {
        $result_344 = null;
        /**
         * matching: /\G  ([a-zA-Z_]\w*):  /Sx
         */
        $pattern = '/\G  ([a-zA-Z_]\w*):  /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_344 = new Node\Regex('label', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_344->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: label = /\G  ([a-zA-Z_]\w*):  /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_344;
    }
    /**
     * identifier = /\G  [a-zA-Z_]\w*  /Sx <_>
     */
    public function match_identifier()
    {
        $result_347 = null;
        /**
         * matching /\G  [a-zA-Z_]\w*  /Sx <_>
         */
        $match_347 = true;
        $pos_347 = $this->pos;
        $children_347 = [];
        do {
            $result_345 = null;
            /**
             * matching: /\G  [a-zA-Z_]\w*  /Sx
             */
            $pattern = '/\G  [a-zA-Z_]\w*  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_345 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_345->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  [a-zA-Z_]\w*  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_345) {
                $match_347 = false;
                break;
            } else {
                $children_347[] = $result_345;
            }
            $result_346 = null;
            $result_346 = $this->apply('_', $this->pos);
            if (!$result_346) {
                $match_347 = false;
                break;
            } else {
                $children_347[] = $result_346;
            }
        } while(0);
        if (true === $match_347) {
            $result_347 = new Node\Sequence('identifier', $this->text, $pos_347, $this->pos, $children_347);
        } else {
            $result_347 = null;
            $this->pos = $pos_347;
        }
        return $result_347;
    }
    /**
     * OR = "|" <_>
     */
    public function match_OR()
    {
        $result_350 = null;
        /**
         * matching "|" <_>
         */
        $match_350 = true;
        $pos_350 = $this->pos;
        $children_350 = [];
        do {
            $result_348 = null;
            /**
             * matching: "|"
             */
            $value = '|';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_348 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_348->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "|">';
                $this->error->pos = $this->pos;
            }
            if (!$result_348) {
                $match_350 = false;
                break;
            } else {
                $children_350[] = $result_348;
            }
            $result_349 = null;
            $result_349 = $this->apply('_', $this->pos);
            if (!$result_349) {
                $match_350 = false;
                break;
            } else {
                $children_350[] = $result_349;
            }
        } while(0);
        if (true === $match_350) {
            $result_350 = new Node\Sequence('OR', $this->text, $pos_350, $this->pos, $children_350);
        } else {
            $result_350 = null;
            $this->pos = $pos_350;
        }
        return $result_350;
    }
    /**
     * _ = (<ws> | <comment>)*
     */
    public function match__()
    {
        $result_354 = null;
 
        /**
         * matching (<ws> | <comment>)*
         */
        $pos_354 = $this->pos;
        $count_354 = 0;
        $children_354 = [];
        while ($count_354 < INF) {
            $result_353 = null;
            /**
             * matching <ws> | <comment>
             */
            $result_353 = null;
            do {
                $pos_353 = $this->pos;
                $result_351 = null;
                $result_351 = $this->apply('ws', $this->pos);
                if ($result_351) {
                    $result_353 = $result_351;
                    break;
                }
                $this->pos = $pos_353;
                $result_352 = null;
                $result_352 = $this->apply('comment', $this->pos);
                if ($result_352) {
                    $result_353 = $result_352;
                    break;
                }
                $this->pos = $pos_353;
            } while (0);
            if ($result_353) {
                $result_353 = new Node\OneOf('', $this->text, $pos_353, $this->pos, [$result_353]);
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: <ws> | <comment>>';
                $this->error->pos = $pos_353;
            }
            if (!$result_353) {
                break;
            }
            $count_354++;
            $children_354[] = $result_353;
            $length = $result_353->end - $result_353->start;
            if (!$length) {
                break;
            }
        }
        if ($count_354 >= 0) {
            $result_354 = new Node\Quantifier('_', $this->text, $pos_354, $this->pos, $children_354);
        } else {
            $this->pos = $pos_354;
        }
        return $result_354;
    }
    /**
     * comment = /\G  \# ([^\r\n]*)  /Sx
     */
    public function match_comment()
    {
        $result_355 = null;
        /**
         * matching: /\G  \# ([^\r\n]*)  /Sx
         */
        $pattern = '/\G  \# ([^\r\n]*)  /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_355 = new Node\Regex('comment', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_355->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: comment = /\G  \# ([^\r\n]*)  /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_355;
    }
    /**
     * ws = /\G \s+ /Sx
     */
    public function match_ws()
    {
        $result_356 = null;
        /**
         * matching: /\G \s+ /Sx
         */
        $pattern = '/\G \s+ /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_356 = new Node\Regex('ws', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_356->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: ws = /\G \s+ /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_356;
    }

}
