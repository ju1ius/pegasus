<?php
/*
 * This file is part of Pegasus
 *
 * (c) 2014 Jules Bernable 
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * This file has been generated by Pegasus.
 */

use ju1ius\Pegasus\Node;


class Pegasus extends ju1ius\Pegasus\Parser\Generated\LRPackrat
{
    /**
     * The default start rule from the grammar.
     *
     * @var string
     */
    protected $start_rule = 'grammar';

    /**
     * grammar = <_> <directives> <rules>
     */
    public function match_grammar()
    {
        $result_135 = null;
        /**
         * matching <_> <directives> <rules>
         */
        $match_135 = true;
        $pos_135 = $this->pos;
        $children_135 = [];
        do {
            $result_132 = null;
            $result_132 = $this->apply('_', $this->pos);
            if (!$result_132) {
                $match_135 = false;
                break;
            } else {
                $children_135[] = $result_132;
            }
            $result_133 = null;
            $result_133 = $this->apply('directives', $this->pos);
            if (!$result_133) {
                $match_135 = false;
                break;
            } else {
                $children_135[] = $result_133;
            }
            $result_134 = null;
            $result_134 = $this->apply('rules', $this->pos);
            if (!$result_134) {
                $match_135 = false;
                break;
            } else {
                $children_135[] = $result_134;
            }
        } while(0);
        if (true === $match_135) {
            $result_135 = new Node\Sequence('grammar', $this->text, $pos_135, $this->pos, $children_135);
        } else {
            $result_135 = null;
            $this->pos = $pos_135;
        }
        return $result_135;
    }
    /**
     * directives = (<directive>)*
     */
    public function match_directives()
    {
        $result_137 = null;
 
        /**
         * matching (<directive>)*
         */
        $pos_137 = $this->pos;
        $count_137 = 0;
        $children_137 = [];
        while ($count_137 < INF) {
            $result_136 = null;
            $result_136 = $this->apply('directive', $this->pos);
            if (!$result_136) {
                break;
            }
            $count_137++;
            $children_137[] = $result_136;
            $length = $result_136->end - $result_136->start;
            if (!$length) {
                break;
            }
        }
        if ($count_137 >= 0) {
            $result_137 = new Node\Quantifier('directives', $this->text, $pos_137, $this->pos, $children_137);
        } else {
            $this->pos = $pos_137;
        }
        return $result_137;
    }
    /**
     * directive = <name_directive> | <start_directive> | <ws_directive> | <ci_directive>
     */
    public function match_directive()
    {
        $result_142 = null;
        /**
         * matching <name_directive> | <start_directive> | <ws_directive> | <ci_directive>
         */
        $result_142 = null;
        do {
            $pos_142 = $this->pos;
            $result_138 = null;
            $result_138 = $this->apply('name_directive', $this->pos);
            if ($result_138) {
                $result_142 = $result_138;
                break;
            }
            $this->pos = $pos_142;
            $result_139 = null;
            $result_139 = $this->apply('start_directive', $this->pos);
            if ($result_139) {
                $result_142 = $result_139;
                break;
            }
            $this->pos = $pos_142;
            $result_140 = null;
            $result_140 = $this->apply('ws_directive', $this->pos);
            if ($result_140) {
                $result_142 = $result_140;
                break;
            }
            $this->pos = $pos_142;
            $result_141 = null;
            $result_141 = $this->apply('ci_directive', $this->pos);
            if ($result_141) {
                $result_142 = $result_141;
                break;
            }
            $this->pos = $pos_142;
        } while (0);
        if ($result_142) {
            $result_142 = new Node\OneOf('directive', $this->text, $pos_142, $this->pos, [$result_142]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: directive = <name_directive> | <start_directive> | <ws_directive> | <ci_directive>>';
            $this->error->pos = $pos_142;
        }
        return $result_142;
    }
    /**
     * name_directive = "%name" <_> <identifier>
     */
    public function match_name_directive()
    {
        $result_146 = null;
        /**
         * matching "%name" <_> <identifier>
         */
        $match_146 = true;
        $pos_146 = $this->pos;
        $children_146 = [];
        do {
            $result_143 = null;
            /**
             * matching: "%name"
             */
            $value = '%name';
            $length = 5;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_143 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_143->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "%name">';
                $this->error->pos = $this->pos;
            }
            if (!$result_143) {
                $match_146 = false;
                break;
            } else {
                $children_146[] = $result_143;
            }
            $result_144 = null;
            $result_144 = $this->apply('_', $this->pos);
            if (!$result_144) {
                $match_146 = false;
                break;
            } else {
                $children_146[] = $result_144;
            }
            $result_145 = null;
            $result_145 = $this->apply('identifier', $this->pos);
            if (!$result_145) {
                $match_146 = false;
                break;
            } else {
                $children_146[] = $result_145;
            }
        } while(0);
        if (true === $match_146) {
            $result_146 = new Node\Sequence('name_directive', $this->text, $pos_146, $this->pos, $children_146);
        } else {
            $result_146 = null;
            $this->pos = $pos_146;
        }
        return $result_146;
    }
    /**
     * start_directive = "%start" <_> <identifier>
     */
    public function match_start_directive()
    {
        $result_150 = null;
        /**
         * matching "%start" <_> <identifier>
         */
        $match_150 = true;
        $pos_150 = $this->pos;
        $children_150 = [];
        do {
            $result_147 = null;
            /**
             * matching: "%start"
             */
            $value = '%start';
            $length = 6;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_147 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_147->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "%start">';
                $this->error->pos = $this->pos;
            }
            if (!$result_147) {
                $match_150 = false;
                break;
            } else {
                $children_150[] = $result_147;
            }
            $result_148 = null;
            $result_148 = $this->apply('_', $this->pos);
            if (!$result_148) {
                $match_150 = false;
                break;
            } else {
                $children_150[] = $result_148;
            }
            $result_149 = null;
            $result_149 = $this->apply('identifier', $this->pos);
            if (!$result_149) {
                $match_150 = false;
                break;
            } else {
                $children_150[] = $result_149;
            }
        } while(0);
        if (true === $match_150) {
            $result_150 = new Node\Sequence('start_directive', $this->text, $pos_150, $this->pos, $children_150);
        } else {
            $result_150 = null;
            $this->pos = $pos_150;
        }
        return $result_150;
    }
    /**
     * ws_directive = "%whitespace" <_> <equals> <expression>
     */
    public function match_ws_directive()
    {
        $result_155 = null;
        /**
         * matching "%whitespace" <_> <equals> <expression>
         */
        $match_155 = true;
        $pos_155 = $this->pos;
        $children_155 = [];
        do {
            $result_151 = null;
            /**
             * matching: "%whitespace"
             */
            $value = '%whitespace';
            $length = 11;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_151 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_151->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "%whitespace">';
                $this->error->pos = $this->pos;
            }
            if (!$result_151) {
                $match_155 = false;
                break;
            } else {
                $children_155[] = $result_151;
            }
            $result_152 = null;
            $result_152 = $this->apply('_', $this->pos);
            if (!$result_152) {
                $match_155 = false;
                break;
            } else {
                $children_155[] = $result_152;
            }
            $result_153 = null;
            $result_153 = $this->apply('equals', $this->pos);
            if (!$result_153) {
                $match_155 = false;
                break;
            } else {
                $children_155[] = $result_153;
            }
            $result_154 = null;
            $result_154 = $this->apply('expression', $this->pos);
            if (!$result_154) {
                $match_155 = false;
                break;
            } else {
                $children_155[] = $result_154;
            }
        } while(0);
        if (true === $match_155) {
            $result_155 = new Node\Sequence('ws_directive', $this->text, $pos_155, $this->pos, $children_155);
        } else {
            $result_155 = null;
            $this->pos = $pos_155;
        }
        return $result_155;
    }
    /**
     * ci_directive = "%case_insensitive" <_>
     */
    public function match_ci_directive()
    {
        $result_158 = null;
        /**
         * matching "%case_insensitive" <_>
         */
        $match_158 = true;
        $pos_158 = $this->pos;
        $children_158 = [];
        do {
            $result_156 = null;
            /**
             * matching: "%case_insensitive"
             */
            $value = '%case_insensitive';
            $length = 17;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_156 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_156->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "%case_insensitive">';
                $this->error->pos = $this->pos;
            }
            if (!$result_156) {
                $match_158 = false;
                break;
            } else {
                $children_158[] = $result_156;
            }
            $result_157 = null;
            $result_157 = $this->apply('_', $this->pos);
            if (!$result_157) {
                $match_158 = false;
                break;
            } else {
                $children_158[] = $result_157;
            }
        } while(0);
        if (true === $match_158) {
            $result_158 = new Node\Sequence('ci_directive', $this->text, $pos_158, $this->pos, $children_158);
        } else {
            $result_158 = null;
            $this->pos = $pos_158;
        }
        return $result_158;
    }
    /**
     * rules = (<rule>)+
     */
    public function match_rules()
    {
        $result_160 = null;
 
        /**
         * matching (<rule>)+
         */
        $pos_160 = $this->pos;
        $count_160 = 0;
        $children_160 = [];
        while ($count_160 < INF) {
            $result_159 = null;
            $result_159 = $this->apply('rule', $this->pos);
            if (!$result_159) {
                break;
            }
            $count_160++;
            $children_160[] = $result_159;
            $length = $result_159->end - $result_159->start;
            if (!$length) {
                break;
            }
        }
        if ($count_160 >= 1) {
            $result_160 = new Node\Quantifier('rules', $this->text, $pos_160, $this->pos, $children_160);
        } else {
            $this->pos = $pos_160;
        }
        return $result_160;
    }
    /**
     * rule = <identifier> <equals> <expression>
     */
    public function match_rule()
    {
        $result_164 = null;
        /**
         * matching <identifier> <equals> <expression>
         */
        $match_164 = true;
        $pos_164 = $this->pos;
        $children_164 = [];
        do {
            $result_161 = null;
            $result_161 = $this->apply('identifier', $this->pos);
            if (!$result_161) {
                $match_164 = false;
                break;
            } else {
                $children_164[] = $result_161;
            }
            $result_162 = null;
            $result_162 = $this->apply('equals', $this->pos);
            if (!$result_162) {
                $match_164 = false;
                break;
            } else {
                $children_164[] = $result_162;
            }
            $result_163 = null;
            $result_163 = $this->apply('expression', $this->pos);
            if (!$result_163) {
                $match_164 = false;
                break;
            } else {
                $children_164[] = $result_163;
            }
        } while(0);
        if (true === $match_164) {
            $result_164 = new Node\Sequence('rule', $this->text, $pos_164, $this->pos, $children_164);
        } else {
            $result_164 = null;
            $this->pos = $pos_164;
        }
        return $result_164;
    }
    /**
     * expression = <choice> | <sequence> | <term>
     */
    public function match_expression()
    {
        $result_168 = null;
        /**
         * matching <choice> | <sequence> | <term>
         */
        $result_168 = null;
        do {
            $pos_168 = $this->pos;
            $result_165 = null;
            $result_165 = $this->apply('choice', $this->pos);
            if ($result_165) {
                $result_168 = $result_165;
                break;
            }
            $this->pos = $pos_168;
            $result_166 = null;
            $result_166 = $this->apply('sequence', $this->pos);
            if ($result_166) {
                $result_168 = $result_166;
                break;
            }
            $this->pos = $pos_168;
            $result_167 = null;
            $result_167 = $this->apply('term', $this->pos);
            if ($result_167) {
                $result_168 = $result_167;
                break;
            }
            $this->pos = $pos_168;
        } while (0);
        if ($result_168) {
            $result_168 = new Node\OneOf('expression', $this->text, $pos_168, $this->pos, [$result_168]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: expression = <choice> | <sequence> | <term>>';
            $this->error->pos = $pos_168;
        }
        return $result_168;
    }
    /**
     * choice = <alternative> (<OR> <alternative>)+
     */
    public function match_choice()
    {
        $result_174 = null;
        /**
         * matching <alternative> (<OR> <alternative>)+
         */
        $match_174 = true;
        $pos_174 = $this->pos;
        $children_174 = [];
        do {
            $result_169 = null;
            $result_169 = $this->apply('alternative', $this->pos);
            if (!$result_169) {
                $match_174 = false;
                break;
            } else {
                $children_174[] = $result_169;
            }
            $result_173 = null;
 
            /**
             * matching (<OR> <alternative>)+
             */
            $pos_173 = $this->pos;
            $count_173 = 0;
            $children_173 = [];
            while ($count_173 < INF) {
                $result_172 = null;
                /**
                 * matching <OR> <alternative>
                 */
                $match_172 = true;
                $pos_172 = $this->pos;
                $children_172 = [];
                do {
                    $result_170 = null;
                    $result_170 = $this->apply('OR', $this->pos);
                    if (!$result_170) {
                        $match_172 = false;
                        break;
                    } else {
                        $children_172[] = $result_170;
                    }
                    $result_171 = null;
                    $result_171 = $this->apply('alternative', $this->pos);
                    if (!$result_171) {
                        $match_172 = false;
                        break;
                    } else {
                        $children_172[] = $result_171;
                    }
                } while(0);
                if (true === $match_172) {
                    $result_172 = new Node\Sequence('', $this->text, $pos_172, $this->pos, $children_172);
                } else {
                    $result_172 = null;
                    $this->pos = $pos_172;
                }
                if (!$result_172) {
                    break;
                }
                $count_173++;
                $children_173[] = $result_172;
                $length = $result_172->end - $result_172->start;
                if (!$length) {
                    break;
                }
            }
            if ($count_173 >= 1) {
                $result_173 = new Node\Quantifier('', $this->text, $pos_173, $this->pos, $children_173);
            } else {
                $this->pos = $pos_173;
            }
            if (!$result_173) {
                $match_174 = false;
                break;
            } else {
                $children_174[] = $result_173;
            }
        } while(0);
        if (true === $match_174) {
            $result_174 = new Node\Sequence('choice', $this->text, $pos_174, $this->pos, $children_174);
        } else {
            $result_174 = null;
            $this->pos = $pos_174;
        }
        return $result_174;
    }
    /**
     * alternative = <sequence> | <term>
     */
    public function match_alternative()
    {
        $result_177 = null;
        /**
         * matching <sequence> | <term>
         */
        $result_177 = null;
        do {
            $pos_177 = $this->pos;
            $result_175 = null;
            $result_175 = $this->apply('sequence', $this->pos);
            if ($result_175) {
                $result_177 = $result_175;
                break;
            }
            $this->pos = $pos_177;
            $result_176 = null;
            $result_176 = $this->apply('term', $this->pos);
            if ($result_176) {
                $result_177 = $result_176;
                break;
            }
            $this->pos = $pos_177;
        } while (0);
        if ($result_177) {
            $result_177 = new Node\OneOf('alternative', $this->text, $pos_177, $this->pos, [$result_177]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: alternative = <sequence> | <term>>';
            $this->error->pos = $pos_177;
        }
        return $result_177;
    }
    /**
     * sequence = (<term>){2,}
     */
    public function match_sequence()
    {
        $result_179 = null;
 
        /**
         * matching (<term>){2,}
         */
        $pos_179 = $this->pos;
        $count_179 = 0;
        $children_179 = [];
        while ($count_179 < INF) {
            $result_178 = null;
            $result_178 = $this->apply('term', $this->pos);
            if (!$result_178) {
                break;
            }
            $count_179++;
            $children_179[] = $result_178;
            $length = $result_178->end - $result_178->start;
            if (!$length) {
                break;
            }
        }
        if ($count_179 >= 2) {
            $result_179 = new Node\Quantifier('sequence', $this->text, $pos_179, $this->pos, $children_179);
        } else {
            $this->pos = $pos_179;
        }
        return $result_179;
    }
    /**
     * term = <labeled> | <labelable>
     */
    public function match_term()
    {
        $result_182 = null;
        /**
         * matching <labeled> | <labelable>
         */
        $result_182 = null;
        do {
            $pos_182 = $this->pos;
            $result_180 = null;
            $result_180 = $this->apply('labeled', $this->pos);
            if ($result_180) {
                $result_182 = $result_180;
                break;
            }
            $this->pos = $pos_182;
            $result_181 = null;
            $result_181 = $this->apply('labelable', $this->pos);
            if ($result_181) {
                $result_182 = $result_181;
                break;
            }
            $this->pos = $pos_182;
        } while (0);
        if ($result_182) {
            $result_182 = new Node\OneOf('term', $this->text, $pos_182, $this->pos, [$result_182]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: term = <labeled> | <labelable>>';
            $this->error->pos = $pos_182;
        }
        return $result_182;
    }
    /**
     * labeled = <label> <labelable>
     */
    public function match_labeled()
    {
        $result_185 = null;
        /**
         * matching <label> <labelable>
         */
        $match_185 = true;
        $pos_185 = $this->pos;
        $children_185 = [];
        do {
            $result_183 = null;
            $result_183 = $this->apply('label', $this->pos);
            if (!$result_183) {
                $match_185 = false;
                break;
            } else {
                $children_185[] = $result_183;
            }
            $result_184 = null;
            $result_184 = $this->apply('labelable', $this->pos);
            if (!$result_184) {
                $match_185 = false;
                break;
            } else {
                $children_185[] = $result_184;
            }
        } while(0);
        if (true === $match_185) {
            $result_185 = new Node\Sequence('labeled', $this->text, $pos_185, $this->pos, $children_185);
        } else {
            $result_185 = null;
            $this->pos = $pos_185;
        }
        return $result_185;
    }
    /**
     * labelable = <prefixed> | <prefixable>
     */
    public function match_labelable()
    {
        $result_188 = null;
        /**
         * matching <prefixed> | <prefixable>
         */
        $result_188 = null;
        do {
            $pos_188 = $this->pos;
            $result_186 = null;
            $result_186 = $this->apply('prefixed', $this->pos);
            if ($result_186) {
                $result_188 = $result_186;
                break;
            }
            $this->pos = $pos_188;
            $result_187 = null;
            $result_187 = $this->apply('prefixable', $this->pos);
            if ($result_187) {
                $result_188 = $result_187;
                break;
            }
            $this->pos = $pos_188;
        } while (0);
        if ($result_188) {
            $result_188 = new Node\OneOf('labelable', $this->text, $pos_188, $this->pos, [$result_188]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: labelable = <prefixed> | <prefixable>>';
            $this->error->pos = $pos_188;
        }
        return $result_188;
    }
    /**
     * prefixed = <skip> | <lookahead> | <not>
     */
    public function match_prefixed()
    {
        $result_192 = null;
        /**
         * matching <skip> | <lookahead> | <not>
         */
        $result_192 = null;
        do {
            $pos_192 = $this->pos;
            $result_189 = null;
            $result_189 = $this->apply('skip', $this->pos);
            if ($result_189) {
                $result_192 = $result_189;
                break;
            }
            $this->pos = $pos_192;
            $result_190 = null;
            $result_190 = $this->apply('lookahead', $this->pos);
            if ($result_190) {
                $result_192 = $result_190;
                break;
            }
            $this->pos = $pos_192;
            $result_191 = null;
            $result_191 = $this->apply('not', $this->pos);
            if ($result_191) {
                $result_192 = $result_191;
                break;
            }
            $this->pos = $pos_192;
        } while (0);
        if ($result_192) {
            $result_192 = new Node\OneOf('prefixed', $this->text, $pos_192, $this->pos, [$result_192]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: prefixed = <skip> | <lookahead> | <not>>';
            $this->error->pos = $pos_192;
        }
        return $result_192;
    }
    /**
     * skip = "~" <prefixable>
     */
    public function match_skip()
    {
        $result_195 = null;
        /**
         * matching "~" <prefixable>
         */
        $match_195 = true;
        $pos_195 = $this->pos;
        $children_195 = [];
        do {
            $result_193 = null;
            /**
             * matching: "~"
             */
            $value = '~';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_193 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_193->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "~">';
                $this->error->pos = $this->pos;
            }
            if (!$result_193) {
                $match_195 = false;
                break;
            } else {
                $children_195[] = $result_193;
            }
            $result_194 = null;
            $result_194 = $this->apply('prefixable', $this->pos);
            if (!$result_194) {
                $match_195 = false;
                break;
            } else {
                $children_195[] = $result_194;
            }
        } while(0);
        if (true === $match_195) {
            $result_195 = new Node\Sequence('skip', $this->text, $pos_195, $this->pos, $children_195);
        } else {
            $result_195 = null;
            $this->pos = $pos_195;
        }
        return $result_195;
    }
    /**
     * lookahead = "&" <prefixable>
     */
    public function match_lookahead()
    {
        $result_198 = null;
        /**
         * matching "&" <prefixable>
         */
        $match_198 = true;
        $pos_198 = $this->pos;
        $children_198 = [];
        do {
            $result_196 = null;
            /**
             * matching: "&"
             */
            $value = '&';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_196 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_196->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "&">';
                $this->error->pos = $this->pos;
            }
            if (!$result_196) {
                $match_198 = false;
                break;
            } else {
                $children_198[] = $result_196;
            }
            $result_197 = null;
            $result_197 = $this->apply('prefixable', $this->pos);
            if (!$result_197) {
                $match_198 = false;
                break;
            } else {
                $children_198[] = $result_197;
            }
        } while(0);
        if (true === $match_198) {
            $result_198 = new Node\Sequence('lookahead', $this->text, $pos_198, $this->pos, $children_198);
        } else {
            $result_198 = null;
            $this->pos = $pos_198;
        }
        return $result_198;
    }
    /**
     * not = "!" <prefixable>
     */
    public function match_not()
    {
        $result_201 = null;
        /**
         * matching "!" <prefixable>
         */
        $match_201 = true;
        $pos_201 = $this->pos;
        $children_201 = [];
        do {
            $result_199 = null;
            /**
             * matching: "!"
             */
            $value = '!';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_199 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_199->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "!">';
                $this->error->pos = $this->pos;
            }
            if (!$result_199) {
                $match_201 = false;
                break;
            } else {
                $children_201[] = $result_199;
            }
            $result_200 = null;
            $result_200 = $this->apply('prefixable', $this->pos);
            if (!$result_200) {
                $match_201 = false;
                break;
            } else {
                $children_201[] = $result_200;
            }
        } while(0);
        if (true === $match_201) {
            $result_201 = new Node\Sequence('not', $this->text, $pos_201, $this->pos, $children_201);
        } else {
            $result_201 = null;
            $this->pos = $pos_201;
        }
        return $result_201;
    }
    /**
     * prefixable = <prefixed> | <suffixable> | <primary>
     */
    public function match_prefixable()
    {
        $result_205 = null;
        /**
         * matching <prefixed> | <suffixable> | <primary>
         */
        $result_205 = null;
        do {
            $pos_205 = $this->pos;
            $result_202 = null;
            $result_202 = $this->apply('prefixed', $this->pos);
            if ($result_202) {
                $result_205 = $result_202;
                break;
            }
            $this->pos = $pos_205;
            $result_203 = null;
            $result_203 = $this->apply('suffixable', $this->pos);
            if ($result_203) {
                $result_205 = $result_203;
                break;
            }
            $this->pos = $pos_205;
            $result_204 = null;
            $result_204 = $this->apply('primary', $this->pos);
            if ($result_204) {
                $result_205 = $result_204;
                break;
            }
            $this->pos = $pos_205;
        } while (0);
        if ($result_205) {
            $result_205 = new Node\OneOf('prefixable', $this->text, $pos_205, $this->pos, [$result_205]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: prefixable = <prefixed> | <suffixable> | <primary>>';
            $this->error->pos = $pos_205;
        }
        return $result_205;
    }
    /**
     * suffixable = <suffixed> | <primary>
     */
    public function match_suffixable()
    {
        $result_208 = null;
        /**
         * matching <suffixed> | <primary>
         */
        $result_208 = null;
        do {
            $pos_208 = $this->pos;
            $result_206 = null;
            $result_206 = $this->apply('suffixed', $this->pos);
            if ($result_206) {
                $result_208 = $result_206;
                break;
            }
            $this->pos = $pos_208;
            $result_207 = null;
            $result_207 = $this->apply('primary', $this->pos);
            if ($result_207) {
                $result_208 = $result_207;
                break;
            }
            $this->pos = $pos_208;
        } while (0);
        if ($result_208) {
            $result_208 = new Node\OneOf('suffixable', $this->text, $pos_208, $this->pos, [$result_208]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: suffixable = <suffixed> | <primary>>';
            $this->error->pos = $pos_208;
        }
        return $result_208;
    }
    /**
     * suffixed = <suffixable> <quantifier>
     */
    public function match_suffixed()
    {
        $result_211 = null;
        /**
         * matching <suffixable> <quantifier>
         */
        $match_211 = true;
        $pos_211 = $this->pos;
        $children_211 = [];
        do {
            $result_209 = null;
            $result_209 = $this->apply('suffixable', $this->pos);
            if (!$result_209) {
                $match_211 = false;
                break;
            } else {
                $children_211[] = $result_209;
            }
            $result_210 = null;
            $result_210 = $this->apply('quantifier', $this->pos);
            if (!$result_210) {
                $match_211 = false;
                break;
            } else {
                $children_211[] = $result_210;
            }
        } while(0);
        if (true === $match_211) {
            $result_211 = new Node\Sequence('suffixed', $this->text, $pos_211, $this->pos, $children_211);
        } else {
            $result_211 = null;
            $this->pos = $pos_211;
        }
        return $result_211;
    }
    /**
     * primary = <parenthesized> | <atom>
     */
    public function match_primary()
    {
        $result_214 = null;
        /**
         * matching <parenthesized> | <atom>
         */
        $result_214 = null;
        do {
            $pos_214 = $this->pos;
            $result_212 = null;
            $result_212 = $this->apply('parenthesized', $this->pos);
            if ($result_212) {
                $result_214 = $result_212;
                break;
            }
            $this->pos = $pos_214;
            $result_213 = null;
            $result_213 = $this->apply('atom', $this->pos);
            if ($result_213) {
                $result_214 = $result_213;
                break;
            }
            $this->pos = $pos_214;
        } while (0);
        if ($result_214) {
            $result_214 = new Node\OneOf('primary', $this->text, $pos_214, $this->pos, [$result_214]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: primary = <parenthesized> | <atom>>';
            $this->error->pos = $pos_214;
        }
        return $result_214;
    }
    /**
     * parenthesized = "(" <_> <expression> ")" <_>
     */
    public function match_parenthesized()
    {
        $result_220 = null;
        /**
         * matching "(" <_> <expression> ")" <_>
         */
        $match_220 = true;
        $pos_220 = $this->pos;
        $children_220 = [];
        do {
            $result_215 = null;
            /**
             * matching: "("
             */
            $value = '(';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_215 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_215->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "(">';
                $this->error->pos = $this->pos;
            }
            if (!$result_215) {
                $match_220 = false;
                break;
            } else {
                $children_220[] = $result_215;
            }
            $result_216 = null;
            $result_216 = $this->apply('_', $this->pos);
            if (!$result_216) {
                $match_220 = false;
                break;
            } else {
                $children_220[] = $result_216;
            }
            $result_217 = null;
            $result_217 = $this->apply('expression', $this->pos);
            if (!$result_217) {
                $match_220 = false;
                break;
            } else {
                $children_220[] = $result_217;
            }
            $result_218 = null;
            /**
             * matching: ")"
             */
            $value = ')';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_218 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_218->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: ")">';
                $this->error->pos = $this->pos;
            }
            if (!$result_218) {
                $match_220 = false;
                break;
            } else {
                $children_220[] = $result_218;
            }
            $result_219 = null;
            $result_219 = $this->apply('_', $this->pos);
            if (!$result_219) {
                $match_220 = false;
                break;
            } else {
                $children_220[] = $result_219;
            }
        } while(0);
        if (true === $match_220) {
            $result_220 = new Node\Sequence('parenthesized', $this->text, $pos_220, $this->pos, $children_220);
        } else {
            $result_220 = null;
            $this->pos = $pos_220;
        }
        return $result_220;
    }
    /**
     * atom = <eof> | <epsilon> | <fail> | <literal> | <regex> | <reference>
     */
    public function match_atom()
    {
        $result_227 = null;
        /**
         * matching <eof> | <epsilon> | <fail> | <literal> | <regex> | <reference>
         */
        $result_227 = null;
        do {
            $pos_227 = $this->pos;
            $result_221 = null;
            $result_221 = $this->apply('eof', $this->pos);
            if ($result_221) {
                $result_227 = $result_221;
                break;
            }
            $this->pos = $pos_227;
            $result_222 = null;
            $result_222 = $this->apply('epsilon', $this->pos);
            if ($result_222) {
                $result_227 = $result_222;
                break;
            }
            $this->pos = $pos_227;
            $result_223 = null;
            $result_223 = $this->apply('fail', $this->pos);
            if ($result_223) {
                $result_227 = $result_223;
                break;
            }
            $this->pos = $pos_227;
            $result_224 = null;
            $result_224 = $this->apply('literal', $this->pos);
            if ($result_224) {
                $result_227 = $result_224;
                break;
            }
            $this->pos = $pos_227;
            $result_225 = null;
            $result_225 = $this->apply('regex', $this->pos);
            if ($result_225) {
                $result_227 = $result_225;
                break;
            }
            $this->pos = $pos_227;
            $result_226 = null;
            $result_226 = $this->apply('reference', $this->pos);
            if ($result_226) {
                $result_227 = $result_226;
                break;
            }
            $this->pos = $pos_227;
        } while (0);
        if ($result_227) {
            $result_227 = new Node\OneOf('atom', $this->text, $pos_227, $this->pos, [$result_227]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: atom = <eof> | <epsilon> | <fail> | <literal> | <regex> | <reference>>';
            $this->error->pos = $pos_227;
        }
        return $result_227;
    }
    /**
     * equals = "=" <_>
     */
    public function match_equals()
    {
        $result_230 = null;
        /**
         * matching "=" <_>
         */
        $match_230 = true;
        $pos_230 = $this->pos;
        $children_230 = [];
        do {
            $result_228 = null;
            /**
             * matching: "="
             */
            $value = '=';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_228 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_228->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "=">';
                $this->error->pos = $this->pos;
            }
            if (!$result_228) {
                $match_230 = false;
                break;
            } else {
                $children_230[] = $result_228;
            }
            $result_229 = null;
            $result_229 = $this->apply('_', $this->pos);
            if (!$result_229) {
                $match_230 = false;
                break;
            } else {
                $children_230[] = $result_229;
            }
        } while(0);
        if (true === $match_230) {
            $result_230 = new Node\Sequence('equals', $this->text, $pos_230, $this->pos, $children_230);
        } else {
            $result_230 = null;
            $this->pos = $pos_230;
        }
        return $result_230;
    }
    /**
     * reference = <identifier> !(<equals>)
     */
    public function match_reference()
    {
        $result_234 = null;
        /**
         * matching <identifier> !(<equals>)
         */
        $match_234 = true;
        $pos_234 = $this->pos;
        $children_234 = [];
        do {
            $result_231 = null;
            $result_231 = $this->apply('identifier', $this->pos);
            if (!$result_231) {
                $match_234 = false;
                break;
            } else {
                $children_234[] = $result_231;
            }
            $result_233 = null;
            /**
             * matching !(<equals>)
             */
            $result_233 = null;
            $result_232 = null;
            $result_232 = $this->apply('equals', $this->pos);
 
            if (!$result_232) {
                $result_233 = new Node\Not('', $this->text, $this->pos, $this->pos);
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Not: !(<equals>)>';
                $this->error->pos = $this->pos;
            }
            if (!$result_233) {
                $match_234 = false;
                break;
            } else {
                $children_234[] = $result_233;
            }
        } while(0);
        if (true === $match_234) {
            $result_234 = new Node\Sequence('reference', $this->text, $pos_234, $this->pos, $children_234);
        } else {
            $result_234 = null;
            $this->pos = $pos_234;
        }
        return $result_234;
    }
    /**
     * eof = /\G  EOF\b  /Sx <_>
     */
    public function match_eof()
    {
        $result_237 = null;
        /**
         * matching /\G  EOF\b  /Sx <_>
         */
        $match_237 = true;
        $pos_237 = $this->pos;
        $children_237 = [];
        do {
            $result_235 = null;
            /**
             * matching: /\G  EOF\b  /Sx
             */
            $pattern = '/\G  EOF\b  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_235 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_235->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  EOF\b  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_235) {
                $match_237 = false;
                break;
            } else {
                $children_237[] = $result_235;
            }
            $result_236 = null;
            $result_236 = $this->apply('_', $this->pos);
            if (!$result_236) {
                $match_237 = false;
                break;
            } else {
                $children_237[] = $result_236;
            }
        } while(0);
        if (true === $match_237) {
            $result_237 = new Node\Sequence('eof', $this->text, $pos_237, $this->pos, $children_237);
        } else {
            $result_237 = null;
            $this->pos = $pos_237;
        }
        return $result_237;
    }
    /**
     * epsilon = /\G  E\b  /Sx <_>
     */
    public function match_epsilon()
    {
        $result_240 = null;
        /**
         * matching /\G  E\b  /Sx <_>
         */
        $match_240 = true;
        $pos_240 = $this->pos;
        $children_240 = [];
        do {
            $result_238 = null;
            /**
             * matching: /\G  E\b  /Sx
             */
            $pattern = '/\G  E\b  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_238 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_238->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  E\b  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_238) {
                $match_240 = false;
                break;
            } else {
                $children_240[] = $result_238;
            }
            $result_239 = null;
            $result_239 = $this->apply('_', $this->pos);
            if (!$result_239) {
                $match_240 = false;
                break;
            } else {
                $children_240[] = $result_239;
            }
        } while(0);
        if (true === $match_240) {
            $result_240 = new Node\Sequence('epsilon', $this->text, $pos_240, $this->pos, $children_240);
        } else {
            $result_240 = null;
            $this->pos = $pos_240;
        }
        return $result_240;
    }
    /**
     * fail = /\G  FAIL\b  /Sx <_>
     */
    public function match_fail()
    {
        $result_243 = null;
        /**
         * matching /\G  FAIL\b  /Sx <_>
         */
        $match_243 = true;
        $pos_243 = $this->pos;
        $children_243 = [];
        do {
            $result_241 = null;
            /**
             * matching: /\G  FAIL\b  /Sx
             */
            $pattern = '/\G  FAIL\b  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_241 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_241->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  FAIL\b  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_241) {
                $match_243 = false;
                break;
            } else {
                $children_243[] = $result_241;
            }
            $result_242 = null;
            $result_242 = $this->apply('_', $this->pos);
            if (!$result_242) {
                $match_243 = false;
                break;
            } else {
                $children_243[] = $result_242;
            }
        } while(0);
        if (true === $match_243) {
            $result_243 = new Node\Sequence('fail', $this->text, $pos_243, $this->pos, $children_243);
        } else {
            $result_243 = null;
            $this->pos = $pos_243;
        }
        return $result_243;
    }
    /**
     * quantifier = /\G (?\> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx <_>
     */
    public function match_quantifier()
    {
        $result_246 = null;
        /**
         * matching /\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx <_>
         */
        $match_246 = true;
        $pos_246 = $this->pos;
        $children_246 = [];
        do {
            $result_244 = null;
            /**
             * matching: /\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx
             */
            $pattern = '/\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_244 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_244->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G (?> ([*+?]) | (?: \{ (\d+)(?:,(\d*))? \} ) ) /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_244) {
                $match_246 = false;
                break;
            } else {
                $children_246[] = $result_244;
            }
            $result_245 = null;
            $result_245 = $this->apply('_', $this->pos);
            if (!$result_245) {
                $match_246 = false;
                break;
            } else {
                $children_246[] = $result_245;
            }
        } while(0);
        if (true === $match_246) {
            $result_246 = new Node\Sequence('quantifier', $this->text, $pos_246, $this->pos, $children_246);
        } else {
            $result_246 = null;
            $this->pos = $pos_246;
        }
        return $result_246;
    }
    /**
     * regex = /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([imsuUX]*)?  /Sx <_>
     */
    public function match_regex()
    {
        $result_249 = null;
        /**
         * matching /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([imsuUX]*)?  /Sx <_>
         */
        $match_249 = true;
        $pos_249 = $this->pos;
        $children_249 = [];
        do {
            $result_247 = null;
            /**
             * matching: /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([imsuUX]*)?  /Sx
             */
            $pattern = '/\G  \/ ((?: (?:\\\\.) | [^\/] )*) \/ ([imsuUX]*)?  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_247 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_247->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  \/ ((?: (?:\\.) | [^\/] )*) \/ ([imsuUX]*)?  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_247) {
                $match_249 = false;
                break;
            } else {
                $children_249[] = $result_247;
            }
            $result_248 = null;
            $result_248 = $this->apply('_', $this->pos);
            if (!$result_248) {
                $match_249 = false;
                break;
            } else {
                $children_249[] = $result_248;
            }
        } while(0);
        if (true === $match_249) {
            $result_249 = new Node\Sequence('regex', $this->text, $pos_249, $this->pos, $children_249);
        } else {
            $result_249 = null;
            $this->pos = $pos_249;
        }
        return $result_249;
    }
    /**
     * literal = /\G  (["']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx <_>
     */
    public function match_literal()
    {
        $result_252 = null;
        /**
         * matching /\G  (["']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx <_>
         */
        $match_252 = true;
        $pos_252 = $this->pos;
        $children_252 = [];
        do {
            $result_250 = null;
            /**
             * matching: /\G  (["']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx
             */
            $pattern = '/\G  (["\']) ((?: (?:\\\\.) | (?:(?!\1).) )*) \1  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_250 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_250->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  (["\']) ((?: (?:\\.) | (?:(?!\1).) )*) \1  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_250) {
                $match_252 = false;
                break;
            } else {
                $children_252[] = $result_250;
            }
            $result_251 = null;
            $result_251 = $this->apply('_', $this->pos);
            if (!$result_251) {
                $match_252 = false;
                break;
            } else {
                $children_252[] = $result_251;
            }
        } while(0);
        if (true === $match_252) {
            $result_252 = new Node\Sequence('literal', $this->text, $pos_252, $this->pos, $children_252);
        } else {
            $result_252 = null;
            $this->pos = $pos_252;
        }
        return $result_252;
    }
    /**
     * label = /\G  ([a-zA-Z_]\w*):  /Sx
     */
    public function match_label()
    {
        $result_253 = null;
        /**
         * matching: /\G  ([a-zA-Z_]\w*):  /Sx
         */
        $pattern = '/\G  ([a-zA-Z_]\w*):  /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_253 = new Node\Regex('label', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_253->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: label = /\G  ([a-zA-Z_]\w*):  /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_253;
    }
    /**
     * identifier = /\G  [a-zA-Z_]\w*  /Sx <_>
     */
    public function match_identifier()
    {
        $result_256 = null;
        /**
         * matching /\G  [a-zA-Z_]\w*  /Sx <_>
         */
        $match_256 = true;
        $pos_256 = $this->pos;
        $children_256 = [];
        do {
            $result_254 = null;
            /**
             * matching: /\G  [a-zA-Z_]\w*  /Sx
             */
            $pattern = '/\G  [a-zA-Z_]\w*  /Sx';
            if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
                $result_254 = new Node\Regex('', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
                $this->pos = $result_254->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: /\G  [a-zA-Z_]\w*  /Sx>';
                $this->error->pos = $this->pos;
            }
            if (!$result_254) {
                $match_256 = false;
                break;
            } else {
                $children_256[] = $result_254;
            }
            $result_255 = null;
            $result_255 = $this->apply('_', $this->pos);
            if (!$result_255) {
                $match_256 = false;
                break;
            } else {
                $children_256[] = $result_255;
            }
        } while(0);
        if (true === $match_256) {
            $result_256 = new Node\Sequence('identifier', $this->text, $pos_256, $this->pos, $children_256);
        } else {
            $result_256 = null;
            $this->pos = $pos_256;
        }
        return $result_256;
    }
    /**
     * OR = "|" <_>
     */
    public function match_OR()
    {
        $result_259 = null;
        /**
         * matching "|" <_>
         */
        $match_259 = true;
        $pos_259 = $this->pos;
        $children_259 = [];
        do {
            $result_257 = null;
            /**
             * matching: "|"
             */
            $value = '|';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_257 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_257->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "|">';
                $this->error->pos = $this->pos;
            }
            if (!$result_257) {
                $match_259 = false;
                break;
            } else {
                $children_259[] = $result_257;
            }
            $result_258 = null;
            $result_258 = $this->apply('_', $this->pos);
            if (!$result_258) {
                $match_259 = false;
                break;
            } else {
                $children_259[] = $result_258;
            }
        } while(0);
        if (true === $match_259) {
            $result_259 = new Node\Sequence('OR', $this->text, $pos_259, $this->pos, $children_259);
        } else {
            $result_259 = null;
            $this->pos = $pos_259;
        }
        return $result_259;
    }
    /**
     * _ = (<ws> | <comment>)*
     */
    public function match__()
    {
        $result_263 = null;
 
        /**
         * matching (<ws> | <comment>)*
         */
        $pos_263 = $this->pos;
        $count_263 = 0;
        $children_263 = [];
        while ($count_263 < INF) {
            $result_262 = null;
            /**
             * matching <ws> | <comment>
             */
            $result_262 = null;
            do {
                $pos_262 = $this->pos;
                $result_260 = null;
                $result_260 = $this->apply('ws', $this->pos);
                if ($result_260) {
                    $result_262 = $result_260;
                    break;
                }
                $this->pos = $pos_262;
                $result_261 = null;
                $result_261 = $this->apply('comment', $this->pos);
                if ($result_261) {
                    $result_262 = $result_261;
                    break;
                }
                $this->pos = $pos_262;
            } while (0);
            if ($result_262) {
                $result_262 = new Node\OneOf('', $this->text, $pos_262, $this->pos, [$result_262]);
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: <ws> | <comment>>';
                $this->error->pos = $pos_262;
            }
            if (!$result_262) {
                break;
            }
            $count_263++;
            $children_263[] = $result_262;
            $length = $result_262->end - $result_262->start;
            if (!$length) {
                break;
            }
        }
        if ($count_263 >= 0) {
            $result_263 = new Node\Quantifier('_', $this->text, $pos_263, $this->pos, $children_263);
        } else {
            $this->pos = $pos_263;
        }
        return $result_263;
    }
    /**
     * comment = /\G  \# ([^\r\n]*)  /Sx
     */
    public function match_comment()
    {
        $result_264 = null;
        /**
         * matching: /\G  \# ([^\r\n]*)  /Sx
         */
        $pattern = '/\G  \# ([^\r\n]*)  /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_264 = new Node\Regex('comment', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_264->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: comment = /\G  \# ([^\r\n]*)  /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_264;
    }
    /**
     * ws = /\G \s+ /Sx
     */
    public function match_ws()
    {
        $result_265 = null;
        /**
         * matching: /\G \s+ /Sx
         */
        $pattern = '/\G \s+ /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_265 = new Node\Regex('ws', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_265->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: ws = /\G \s+ /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_265;
    }

}
