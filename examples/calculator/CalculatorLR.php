<?php
/*
 * This file is part of Pegasus
 *
 * (c) 2014 Jules Bernable 
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * This file has been generated by Pegasus.
 */

use ju1ius\Pegasus\Node;


class CalculatorLR extends ju1ius\Pegasus\Parser\Generated\LRPackrat
{
    /**
     * The default start rule from the grammar.
     *
     * @var string
     */
    protected $start_rule = 'expr';

    /**
     * expr = <expr> "+" <term> | <expr> "-" <term> | <term>
     */
    public function match_expr()
    {
        $result_141 = null;
        /**
         * matching <expr> "+" <term> | <expr> "-" <term> | <term>
         *
         */
        $result_141 = null;
        do {
            $pos_141 = $this->pos;
            $result_135 = null;
            /**
             * matching <expr> "+" <term>
             */
            $match_135 = true;
            $pos_135 = $this->pos;
            $children_135 = [];
            do {
                $result_132 = null;
                $result_132 = $this->apply('expr', $this->pos);
                if (!$result_132) {
                    $match_135 = false;
                    break;
                } else {
                    $children_135[] = $result_132;
                }
                $result_133 = null;
                /**
                 * matching: "+"
                 */
                $value = '+';
                $length = 1;
                if (strpos($this->text, $value, $this->pos) === $this->pos) {
                    $result_133 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                    $this->pos = $result_133->end;
                } else {
                    $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "+">';
                    $this->error->pos = $this->pos;
                }
                if (!$result_133) {
                    $match_135 = false;
                    break;
                } else {
                    $children_135[] = $result_133;
                }
                $result_134 = null;
                $result_134 = $this->apply('term', $this->pos);
                if (!$result_134) {
                    $match_135 = false;
                    break;
                } else {
                    $children_135[] = $result_134;
                }
            } while(0);
            if (true === $match_135) {
                $result_135 = new Node\Sequence('', $this->text, $pos_135, $this->pos, $children_135);
            } else {
                $result_135 = null;
                $this->pos = $pos_135;
            }
            if ($result_135) {
                $result_141 = $result_135;
                break;
            }
            $this->pos = $pos_141;
            $result_139 = null;
            /**
             * matching <expr> "-" <term>
             */
            $match_139 = true;
            $pos_139 = $this->pos;
            $children_139 = [];
            do {
                $result_136 = null;
                $result_136 = $this->apply('expr', $this->pos);
                if (!$result_136) {
                    $match_139 = false;
                    break;
                } else {
                    $children_139[] = $result_136;
                }
                $result_137 = null;
                /**
                 * matching: "-"
                 */
                $value = '-';
                $length = 1;
                if (strpos($this->text, $value, $this->pos) === $this->pos) {
                    $result_137 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                    $this->pos = $result_137->end;
                } else {
                    $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "-">';
                    $this->error->pos = $this->pos;
                }
                if (!$result_137) {
                    $match_139 = false;
                    break;
                } else {
                    $children_139[] = $result_137;
                }
                $result_138 = null;
                $result_138 = $this->apply('term', $this->pos);
                if (!$result_138) {
                    $match_139 = false;
                    break;
                } else {
                    $children_139[] = $result_138;
                }
            } while(0);
            if (true === $match_139) {
                $result_139 = new Node\Sequence('', $this->text, $pos_139, $this->pos, $children_139);
            } else {
                $result_139 = null;
                $this->pos = $pos_139;
            }
            if ($result_139) {
                $result_141 = $result_139;
                break;
            }
            $this->pos = $pos_141;
            $result_140 = null;
            $result_140 = $this->apply('term', $this->pos);
            if ($result_140) {
                $result_141 = $result_140;
                break;
            }
            $this->pos = $pos_141;
        } while (0);
        if ($result_141) {
            $result_141 = new Node\OneOf('expr', $this->text, $pos_141, $this->pos, [$result_141]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: expr = <expr> "+" <term> | <expr> "-" <term> | <term>>';
            $this->error->pos = $pos_141;
        }
        return $result_141;
    }
    /**
     * term = <term> "*" <primary> | <term> "/" <primary> | <primary>
     */
    public function match_term()
    {
        $result_151 = null;
        /**
         * matching <term> "*" <primary> | <term> "/" <primary> | <primary>
         */
        $result_151 = null;
        do {
            $pos_151 = $this->pos;
            $result_145 = null;
            /**
             * matching <term> "*" <primary>
             */
            $match_145 = true;
            $pos_145 = $this->pos;
            $children_145 = [];
            do {
                $result_142 = null;
                $result_142 = $this->apply('term', $this->pos);
                if (!$result_142) {
                    $match_145 = false;
                    break;
                } else {
                    $children_145[] = $result_142;
                }
                $result_143 = null;
                /**
                 * matching: "*"
                 */
                $value = '*';
                $length = 1;
                if (strpos($this->text, $value, $this->pos) === $this->pos) {
                    $result_143 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                    $this->pos = $result_143->end;
                } else {
                    $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "*">';
                    $this->error->pos = $this->pos;
                }
                if (!$result_143) {
                    $match_145 = false;
                    break;
                } else {
                    $children_145[] = $result_143;
                }
                $result_144 = null;
                $result_144 = $this->apply('primary', $this->pos);
                if (!$result_144) {
                    $match_145 = false;
                    break;
                } else {
                    $children_145[] = $result_144;
                }
            } while(0);
            if (true === $match_145) {
                $result_145 = new Node\Sequence('', $this->text, $pos_145, $this->pos, $children_145);
            } else {
                $result_145 = null;
                $this->pos = $pos_145;
            }
            if ($result_145) {
                $result_151 = $result_145;
                break;
            }
            $this->pos = $pos_151;
            $result_149 = null;
            /**
             * matching <term> "/" <primary>
             */
            $match_149 = true;
            $pos_149 = $this->pos;
            $children_149 = [];
            do {
                $result_146 = null;
                $result_146 = $this->apply('term', $this->pos);
                if (!$result_146) {
                    $match_149 = false;
                    break;
                } else {
                    $children_149[] = $result_146;
                }
                $result_147 = null;
                /**
                 * matching: "/"
                 */
                $value = '/';
                $length = 1;
                if (strpos($this->text, $value, $this->pos) === $this->pos) {
                    $result_147 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                    $this->pos = $result_147->end;
                } else {
                    $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "/">';
                    $this->error->pos = $this->pos;
                }
                if (!$result_147) {
                    $match_149 = false;
                    break;
                } else {
                    $children_149[] = $result_147;
                }
                $result_148 = null;
                $result_148 = $this->apply('primary', $this->pos);
                if (!$result_148) {
                    $match_149 = false;
                    break;
                } else {
                    $children_149[] = $result_148;
                }
            } while(0);
            if (true === $match_149) {
                $result_149 = new Node\Sequence('', $this->text, $pos_149, $this->pos, $children_149);
            } else {
                $result_149 = null;
                $this->pos = $pos_149;
            }
            if ($result_149) {
                $result_151 = $result_149;
                break;
            }
            $this->pos = $pos_151;
            $result_150 = null;
            $result_150 = $this->apply('primary', $this->pos);
            if ($result_150) {
                $result_151 = $result_150;
                break;
            }
            $this->pos = $pos_151;
        } while (0);
        if ($result_151) {
            $result_151 = new Node\OneOf('term', $this->text, $pos_151, $this->pos, [$result_151]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: term = <term> "*" <primary> | <term> "/" <primary> | <primary>>';
            $this->error->pos = $pos_151;
        }
        return $result_151;
    }
    /**
     * primary = "(" <expr> ")" | <num>
     */
    public function match_primary()
    {
        $result_157 = null;
        /**
         * matching "(" <expr> ")" | <num>
         */
        $result_157 = null;
        do {
            $pos_157 = $this->pos;
            $result_155 = null;
            /**
             * matching "(" <expr> ")"
             */
            $match_155 = true;
            $pos_155 = $this->pos;
            $children_155 = [];
            do {
                $result_152 = null;
                /**
                 * matching: "("
                 */
                $value = '(';
                $length = 1;
                if (strpos($this->text, $value, $this->pos) === $this->pos) {
                    $result_152 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                    $this->pos = $result_152->end;
                } else {
                    $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "(">';
                    $this->error->pos = $this->pos;
                }
                if (!$result_152) {
                    $match_155 = false;
                    break;
                } else {
                    $children_155[] = $result_152;
                }
                $result_153 = null;
                $result_153 = $this->apply('expr', $this->pos);
                if (!$result_153) {
                    $match_155 = false;
                    break;
                } else {
                    $children_155[] = $result_153;
                }
                $result_154 = null;
                /**
                 * matching: ")"
                 */
                $value = ')';
                $length = 1;
                if (strpos($this->text, $value, $this->pos) === $this->pos) {
                    $result_154 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                    $this->pos = $result_154->end;
                } else {
                    $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: ")">';
                    $this->error->pos = $this->pos;
                }
                if (!$result_154) {
                    $match_155 = false;
                    break;
                } else {
                    $children_155[] = $result_154;
                }
            } while(0);
            if (true === $match_155) {
                $result_155 = new Node\Sequence('', $this->text, $pos_155, $this->pos, $children_155);
            } else {
                $result_155 = null;
                $this->pos = $pos_155;
            }
            if ($result_155) {
                $result_157 = $result_155;
                break;
            }
            $this->pos = $pos_157;
            $result_156 = null;
            $result_156 = $this->apply('num', $this->pos);
            if ($result_156) {
                $result_157 = $result_156;
                break;
            }
            $this->pos = $pos_157;
        } while (0);
        if ($result_157) {
            $result_157 = new Node\OneOf('primary', $this->text, $pos_157, $this->pos, [$result_157]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: primary = "(" <expr> ")" | <num>>';
            $this->error->pos = $pos_157;
        }
        return $result_157;
    }
    /**
     * num = <expo> | <float> | <int>
     */
    public function match_num()
    {
        $result_161 = null;
        /**
         * matching <expo> | <float> | <int>
         */
        $result_161 = null;
        do {
            $pos_161 = $this->pos;
            $result_158 = null;
            $result_158 = $this->apply('expo', $this->pos);
            if ($result_158) {
                $result_161 = $result_158;
                break;
            }
            $this->pos = $pos_161;
            $result_159 = null;
            $result_159 = $this->apply('float', $this->pos);
            if ($result_159) {
                $result_161 = $result_159;
                break;
            }
            $this->pos = $pos_161;
            $result_160 = null;
            $result_160 = $this->apply('int', $this->pos);
            if ($result_160) {
                $result_161 = $result_160;
                break;
            }
            $this->pos = $pos_161;
        } while (0);
        if ($result_161) {
            $result_161 = new Node\OneOf('num', $this->text, $pos_161, $this->pos, [$result_161]);
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: num = <expo> | <float> | <int>>';
            $this->error->pos = $pos_161;
        }
        return $result_161;
    }
    /**
     * float = /\G -?[0-9]*\.[0-9]+ /Sx
     */
    public function match_float()
    {
        $result_162 = null;
        /**
         * matching: /\G -?[0-9]*\.[0-9]+ /Sx
         */
        $pattern = '/\G -?[0-9]*\.[0-9]+ /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_162 = new Node\Regex('float', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_162->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: float = /\G -?[0-9]*\.[0-9]+ /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_162;
    }
    /**
     * int = /\G -?[0-9]+ /Sx
     */
    public function match_int()
    {
        $result_163 = null;
        /**
         * matching: /\G -?[0-9]+ /Sx
         */
        $pattern = '/\G -?[0-9]+ /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_163 = new Node\Regex('int', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_163->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: int = /\G -?[0-9]+ /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_163;
    }
    /**
     * expo = <float> | <int> "e" <int>
     */
    public function match_expo()
    {
        $result_169 = null;
        /**
         * matching <float> | <int> "e" <int>
         */
        $match_169 = true;
        $pos_169 = $this->pos;
        $children_169 = [];
        do {
            $result_166 = null;
            /**
             * matching <float> | <int>
             */
            $result_166 = null;
            do {
                $pos_166 = $this->pos;
                $result_164 = null;
                $result_164 = $this->apply('float', $this->pos);
                if ($result_164) {
                    $result_166 = $result_164;
                    break;
                }
                $this->pos = $pos_166;
                $result_165 = null;
                $result_165 = $this->apply('int', $this->pos);
                if ($result_165) {
                    $result_166 = $result_165;
                    break;
                }
                $this->pos = $pos_166;
            } while (0);
            if ($result_166) {
                $result_166 = new Node\OneOf('', $this->text, $pos_166, $this->pos, [$result_166]);
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\OneOf: <float> | <int>>';
                $this->error->pos = $pos_166;
            }
            if (!$result_166) {
                $match_169 = false;
                break;
            } else {
                $children_169[] = $result_166;
            }
            $result_167 = null;
            /**
             * matching: "e"
             */
            $value = 'e';
            $length = 1;
            if (strpos($this->text, $value, $this->pos) === $this->pos) {
                $result_167 = new Node\Literal('', $this->text, $this->pos, $this->pos + $length);
                $this->pos = $result_167->end;
            } else {
                $this->error->expr = '<ju1ius\Pegasus\Expression\Literal: "e">';
                $this->error->pos = $this->pos;
            }
            if (!$result_167) {
                $match_169 = false;
                break;
            } else {
                $children_169[] = $result_167;
            }
            $result_168 = null;
            $result_168 = $this->apply('int', $this->pos);
            if (!$result_168) {
                $match_169 = false;
                break;
            } else {
                $children_169[] = $result_168;
            }
        } while(0);
        if (true === $match_169) {
            $result_169 = new Node\Sequence('expo', $this->text, $pos_169, $this->pos, $children_169);
        } else {
            $result_169 = null;
            $this->pos = $pos_169;
        }
        return $result_169;
    }
    /**
     * _ = /\G \s* /Sx
     */
    public function match__()
    {
        $result_170 = null;
        /**
         * matching: /\G \s* /Sx
         */
        $pattern = '/\G \s* /Sx';
        if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
            $result_170 = new Node\Regex('_', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
            $this->pos = $result_170->end;
        } else {
            $this->error->expr = '<ju1ius\Pegasus\Expression\Regex: _ = /\G \s* /Sx>';
            $this->error->pos = $this->pos;
        }
        return $result_170;
    }

}
