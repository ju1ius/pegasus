<?php
/*
 * This file is part of Pegasus
 *
 * Â© 2014 Jules Bernable
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace ju1ius\Pegasus\Expression\Terminal;

use ju1ius\Pegasus\Expression\Terminal;
use ju1ius\Pegasus\CST\Node;
use ju1ius\Pegasus\Parser\Parser;
use ju1ius\Pegasus\Parser\Scope;

/**
 * This class is only generated by optimizations.
 * Do not use it directly.
 *
 * @internal
 *
 * @author ju1ius <ju1ius@laposte.net>
 */
final class GroupMatch extends Terminal
{
    /**
     * @var Match
     */
    private $matcher;

    /**
     * @var int
     */
    private $groupCount;

    /**
     * @var string
     */
    private $compiledPattern;

    /**
     * GroupMatch constructor.
     *
     * @param Match  $match
     * @param int    $groupCount
     * @param string $name
     */
    public function __construct(Match $match, $groupCount, $name = '')
    {
        $this->matcher = $match;
        $this->groupCount = $groupCount;
        $this->compiledPattern = $match->getCompiledPattern();

        parent::__construct($name);
    }

    /**
     * @return Match
     */
    public function getMatcher()
    {
        return $this->matcher;
    }

    /**
     * @return string
     */
    public function getPattern()
    {
        return $this->matcher->getPattern();
    }

    /**
     * @return string[]
     */
    public function getFlags()
    {
        return $this->matcher->getFlags();
    }

    /**
     * @return string
     */
    public function getCompiledPattern()
    {
        return $this->compiledPattern;
    }

    /**
     * @return int
     */
    public function getCaptureCount()
    {
        return $this->groupCount;
    }

    /**
     * @inheritDoc
     */
    public function match($text, Parser $parser, Scope $scope)
    {
        $start = $parser->pos;
        if (preg_match($this->compiledPattern, $text, $matches, 0, $start)) {
            $end = $parser->pos += strlen($matches[0]);
            if (!$parser->isCapturing) {
                return true;
            }

            if ($this->groupCount === 1) {
                return new Node\Terminal($this->name, $start, $end, $matches[1]);
            }

            return new Node\Terminal($this->name, $start, $end, $matches[0], [
                'captures' => array_slice($matches, 1)
            ]);
        }

        $parser->registerFailure($this, $start);
    }

    /**
     * @inheritDoc
     */
    public function __toString()
    {
        return sprintf('GroupMatch[%s, %d]', $this->compiledPattern, $this->groupCount);
    }
}
