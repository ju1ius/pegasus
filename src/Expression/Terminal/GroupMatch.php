<?php declare(strict_types=1);

namespace ju1ius\Pegasus\Expression\Terminal;

use ju1ius\Pegasus\CST\Node\Terminal as TerminalNode;
use ju1ius\Pegasus\Expression\TerminalExpression as TerminalExpression;
use ju1ius\Pegasus\Parser\Parser;

/**
 * This type of expression is generated by the optimizer,
 * as the result of combining multiple consecutive Match expressions
 * into one optimized regular expression.
 *
 * You should not use it directly.
 *
 * @internal
 */
final class GroupMatch extends TerminalExpression
{
    private string $compiledPattern;

    public function __construct(
        private NonCapturingRegExp $matcher,
        private int $groupCount,
        string $name = ''
    ) {
        $this->compiledPattern = $matcher->getCompiledPattern();
        parent::__construct($name);
    }

    public function getMatcher(): NonCapturingRegExp
    {
        return $this->matcher;
    }

    public function getPattern(): string
    {
        return $this->matcher->getPattern();
    }

    /**
     * @return string[]
     */
    public function getFlags(): array
    {
        return $this->matcher->getFlags();
    }

    public function getCompiledPattern(): string
    {
        return $this->compiledPattern;
    }

    public function getCaptureCount(): int
    {
        return $this->groupCount;
    }

    public function matches(string $text, Parser $parser): TerminalNode|bool
    {
        $start = $parser->pos;
        if (preg_match($this->compiledPattern, $text, $matches, 0, $start)) {
            $end = $parser->pos += \strlen($matches[0]);
            if (!$parser->isCapturing) {
                return true;
            }

            if ($this->groupCount === 1) {
                return new TerminalNode($this->name, $start, $end, $matches[1]);
            }

            return new TerminalNode($this->name, $start, $end, $matches[0], [
                'captures' => array_slice($matches, 1)
            ]);
        }
        return false;
    }

    public function __toString(): string
    {
        return sprintf('GroupMatch[%s, %d]', $this->compiledPattern, $this->groupCount);
    }
}
