@grammar Pegasus
@start grammar

grammar             = _ header rules

########### Directives ##########

header              = import_directive* grammar_directive? header_directive*
header_directive    = start_directive
                    | ws_directive
                    | ci_directive

grammar_directive   = ~'@grammar' _ identifier (~`extends` _ identifier)?
import_directive    = ~'@import' _ identifier _ ~'from' _ STRING _
start_directive     = ~'@start' _ identifier
ws_directive        = ~'@whitespace' _ ~'=' _ unattributed
ci_directive        = ~'@case_insensitive' _

rule_directive      = ~`@lexical` _     <= LexicalDirective
                    | ~`@inline` _      <= InlineDirective

########### Rules ##########

rules           = rule+
rule            = rule_directive* (identifier ~'=' _ <= RuleName) expression

##### Decorator expressions #####

# prefix
token           = ~'%' prefixable
ignore          = ~'~' prefixable
assert          = ~'&' prefixable
not             = ~'!' prefixable
labeled         = IDENT ~':' labelable

# postfix
quantifier      = /(?> ([*+?]) | (?: \{ (\d+) (?:,(\d*))? \} ) )/ _
cut             = "^" _

##### Terminal expressions #####

reference       = identifier !'='
back_reference  = ~'$' identifier
super_call      = ~`super` (~'::' identifier)?
module_call     = IDENT ~'::' identifier

literal         = STRING _
word_literal    = ~'`' /[^`]+/ ~'`' _
regexp          = / \/ ((?:\\.|[^\/])*) \/ ([imsUXJ]*) / _
any             = "." _
eof             = `EOF` _
epsilon         = `E` _
fail            = `FAIL` _

##### Expression components #####

unattributed    = unattributed ~'|' _ terms                    <= OneOf
                | terms

expression      = expression ~'|' _ attributed                 <= OneOf
                | attributed

attributed      = attributed? ~'<=' _ identifier               <= NodeAction
                | attributed_terms

attributed_terms    = attributed term                          <= Sequence
                    | terms

terms           = terms term                                   <= Sequence
                | term

term            = fail
                | labeled
                | labelable

labelable       = prefixed
                | prefixable

prefixed        = token
                | ignore
                | assert
                | not

prefixable      = prefixed
                | suffixable
                | primary

suffixable      = suffixed
                | primary

suffixed        = suffixable (quantifier | cut)

primary         = parenthesized
                | atom

parenthesized   = ~'(' _ expression ~')' _

atom            = eof
                | epsilon
                | fail
                | literal
                | word_literal
                | regexp
                | back_reference
                | super_call
                | module_call
                | reference

identifier      = IDENT _

##### Tokens #####

@inline IDENT   = /[a-zA-Z_]\w*/
@inline STRING  = / (["']) ( (?:\\.|(?!\1).)* ) \1 /

##### Whitespace & comments #####

@inline _               = ~(ws | comment)*
@inline comment         = /\#[^\n]*/
@inline ws              = /\s+/
