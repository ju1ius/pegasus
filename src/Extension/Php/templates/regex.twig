{% set result_var = '$result_' ~ expr.id %}
/**
 * matching: {{ expr.asRhs() }}
 */
{% if expr.hasBackReference -%}

{% collect 'properties' %}
/**
 * Back reference replacements for rule {{expr.name}}
 *
 * @var array
 */
protected $backref_replacements_{{expr.id}} = {{repr(expr.subjectParts)}};
{% endcollect %}
$pattern = '/\G' . $this->replaceBackrefSubject($backref_replacements_{{expr.id}}, true) . '/{{expr.compiled_flags}}';

{%- else -%}

$pattern = {{rxrepr(expr.compiled_pattern)}};

{%- endif %}

if(preg_match($pattern, $this->text, $matches, 0, $this->pos)) {
    {{result_var}} = new Node\Regex('{{expr.name}}', $this->text, $this->pos, $this->pos + strlen($matches[0]), $matches); 
    $this->pos = {{result_var}}->end;
} else {
{{macros.error(expr) | indent}}
}
